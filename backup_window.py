# -*- coding: utf-8 -*-
"""
–û–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏
"""

import tkinter as tk
from tkinter import ttk, messagebox
from backup_manager import BackupManager
from styles import apply_styles, COLORS, create_styled_button


class BackupWindow:
    """–ö–ª–∞—Å—Å –æ–∫–Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏"""
    
    def __init__(self, parent, db_path: str = "calendar_plans.db"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫–Ω–∞
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
            db_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ë–î
        """
        self.parent = parent
        self.backup_manager = BackupManager(db_path)
        
        # –°–æ–∑–¥–∞—ë–º –æ–∫–Ω–æ
        self.window = tk.Toplevel(parent)
        self.window.title("–î–Æ–°–ö –Ø–º–±—É—Ä–≥ - –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ")
        self.window.geometry("800x550")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –µ–¥–∏–Ω—ã–µ —Å—Ç–∏–ª–∏
        apply_styles(self.window)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.window.transient(parent)
        self.window.grab_set()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ (–¥–ª—è Red OS –∏ –¥—Ä—É–≥–∏—Ö —Å–∏—Å—Ç–µ–º)
        self.window.protocol("WM_DELETE_WINDOW", self.window.destroy)
        
        self._create_widgets()
        self._load_backups()
    
    def _create_widgets(self):
        """–°–æ–∑–¥–∞—Ç—å –≤–∏–¥–∂–µ—Ç—ã –æ–∫–Ω–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = ttk.Label(
            self.window, 
            text="üíæ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏",
            style='Header.TLabel'
        )
        header.pack(pady=15)
        
        # –ü–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π - –≤ –µ–¥–∏–Ω–æ–º —Å—Ç–∏–ª–µ
        action_frame = ttk.Frame(self.window)
        action_frame.pack(fill=tk.X, padx=10, pady=10)
        
        create_styled_button(
            action_frame, "‚ûï –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é", 
            self._create_backup, style='primary'
        ).pack(side=tk.LEFT, padx=5)
        
        create_styled_button(
            action_frame, "‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", 
            self._restore_backup, style='secondary'
        ).pack(side=tk.LEFT, padx=5)
        
        create_styled_button(
            action_frame, "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", 
            self._delete_backup, style='normal'
        ).pack(side=tk.LEFT, padx=5)
        
        create_styled_button(
            action_frame, "üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ", 
            self._cleanup_old, style='normal'
        ).pack(side=tk.LEFT, padx=5)
        
        create_styled_button(
            action_frame, "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", 
            self._load_backups, style='normal'
        ).pack(side=tk.LEFT, padx=5)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats_label = ttk.Label(
            self.window, 
            text="",
            font=('Arial', 9)
        )
        self.stats_label.pack(pady=5)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å –±—ç–∫–∞–ø–∞–º–∏
        table_frame = ttk.Frame(self.window)
        table_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # Scrollbar
        scrollbar = ttk.Scrollbar(table_frame)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # Treeview
        self.tree = ttk.Treeview(
            table_frame,
            columns=("date", "size"),
            show="headings",
            yscrollcommand=scrollbar.set,
            selectmode="browse"
        )
        
        scrollbar.config(command=self.tree.yview)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        self.tree.heading("date", text="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
        self.tree.heading("size", text="–†–∞–∑–º–µ—Ä")
        
        self.tree.column("date", width=300, anchor=tk.W)
        self.tree.column("size", width=150, anchor=tk.E)
        
        self.tree.pack(fill=tk.BOTH, expand=True)
        
        # –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        self.tree.bind("<Double-Button-1>", lambda e: self._restore_backup())
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞
        hint_label = ttk.Label(
            self.window,
            text="üí° –°–æ–≤–µ—Ç: –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –ø–µ—Ä–µ–¥ –≤–∞–∂–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏. –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.",
            font=('Arial', 9),
            foreground="gray"
        )
        hint_label.pack(pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        create_styled_button(
            self.window, "–ó–∞–∫—Ä—ã—Ç—å", 
            self.window.destroy, style='normal'
        ).pack(pady=10)
    
    def _load_backups(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        for item in self.tree.get_children():
            self.tree.delete(item)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±—ç–∫–∞–ø—ã
        backups = self.backup_manager.get_backups()
        
        for filename, date_str, size in backups:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä
            if size < 1024:
                size_str = f"{size} –±–∞–π—Ç"
            elif size < 1024 * 1024:
                size_str = f"{size / 1024:.1f} –ö–ë"
            else:
                size_str = f"{size / (1024 * 1024):.1f} –ú–ë"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
            self.tree.insert("", tk.END, values=(date_str, size_str), tags=(filename,))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = self.backup_manager.get_backup_stats()
        stats_text = f"–í—Å–µ–≥–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {stats['count']} | "
        stats_text += f"–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {stats['total_size_mb']} –ú–ë"
        
        if stats['newest']:
            stats_text += f" | –ü–æ—Å–ª–µ–¥–Ω—è—è: {stats['newest']}"
        
        self.stats_label.config(text=stats_text)
    
    def _create_backup(self):
        """–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"""
        success, message = self.backup_manager.create_backup()
        
        if success:
            messagebox.showinfo(
                "–£—Å–ø–µ—Ö", 
                f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\n–§–∞–π–ª: {message}"
            )
            self._load_backups()
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", message)
    
    def _restore_backup(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        selection = self.tree.selection()
        
        if not selection:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ tags
        item = selection[0]
        filename = self.tree.item(item, "tags")[0]
        date_str = self.tree.item(item, "values")[0]
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirm = messagebox.askyesno(
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –æ—Ç {date_str}?\n\n"
            "‚ö† –í–ù–ò–ú–ê–ù–ò–ï: –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã!\n"
            "–¢–µ–∫—É—â–∞—è –ë–î –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º."
        )
        
        if not confirm:
            return
        
        success, message = self.backup_manager.restore_backup(filename)
        
        if success:
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"{message}\n\n–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
            self.window.destroy()
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", message)
    
    def _delete_backup(self):
        """–£–¥–∞–ª–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"""
        selection = self.tree.selection()
        
        if not selection:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ tags
        item = selection[0]
        filename = self.tree.item(item, "tags")[0]
        date_str = self.tree.item(item, "values")[0]
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirm = messagebox.askyesno(
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            f"–£–¥–∞–ª–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –æ—Ç {date_str}?"
        )
        
        if not confirm:
            return
        
        success, message = self.backup_manager.delete_backup(filename)
        
        if success:
            messagebox.showinfo("–£—Å–ø–µ—Ö", message)
            self._load_backups()
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", message)
    
    def _cleanup_old(self):
        """–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏"""
        stats = self.backup_manager.get_backup_stats()
        
        if stats['count'] <= 10:
            messagebox.showinfo(
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                f"–ù–∞–π–¥–µ–Ω–æ {stats['count']} —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π.\n\n"
                "–û—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è (—Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)."
            )
            return
        
        to_delete = stats['count'] - 10
        
        confirm = messagebox.askyesno(
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            f"–ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ {to_delete} —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π.\n"
            f"–û—Å—Ç–∞–Ω–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10.\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
        )
        
        if not confirm:
            return
        
        deleted = self.backup_manager.cleanup_old_backups(keep_count=10)
        
        messagebox.showinfo("–£—Å–ø–µ—Ö", f"–£–¥–∞–ª–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {deleted}")
        self._load_backups()

