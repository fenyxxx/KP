# -*- coding: utf-8 -*-
"""
–û–∫–Ω–æ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–º–µ—Ç–∞–º–∏ –≤—ã–µ–∑–¥–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
"""

import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
from models import Event, Estimate, EstimateItem
from styles import apply_styles, COLORS, create_styled_button, FONT_FAMILY
import webbrowser
import os
import html
from datetime import datetime


class EstimateWindow:
    """–ö–ª–∞—Å—Å –æ–∫–Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–º–µ—Ç–∞–º–∏"""
    
    def __init__(self, parent, db, event: Event):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫–Ω–∞ —Å–º–µ—Ç
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
            db: –û–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            event: –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–∑–¥–∞—é—Ç—Å—è —Å–º–µ—Ç—ã
        """
        self.db = db
        self.event = event
        self.estimates = []
        
        # –°–æ–∑–¥–∞—ë–º –æ–∫–Ω–æ
        self.window = tk.Toplevel(parent)
        self.window.title(f"–°–º–µ—Ç—ã - {event.name}")
        self.window.geometry("1200x800")
        self.window.transient(parent)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
        apply_styles(self.window)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        self.window.protocol("WM_DELETE_WINDOW", self.window.destroy)
        
        self._create_widgets()
        self._load_estimates()
    
    def _create_widgets(self):
        """–°–æ–∑–¥–∞—Ç—å –≤–∏–¥–∂–µ—Ç—ã –æ–∫–Ω–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ttk.Frame(self.window, padding="15")
        header_frame.pack(fill=tk.X)
        
        ttk.Label(
            header_frame,
            text=f"üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ—Ç–∞–º–∏",
            style='Header.TLabel'
        ).pack(side=tk.LEFT)
        
        ttk.Label(
            header_frame,
            text=f"{self.event.name} ({self.event.month} {self.event.year}, {self.event.location})",
            font=(FONT_FAMILY, 10)
        ).pack(side=tk.LEFT, padx=15)
        
        # –ü–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫
        button_frame = ttk.Frame(self.window, padding="10")
        button_frame.pack(fill=tk.X)
        
        create_styled_button(
            button_frame,
            "‚ûï –°–æ–∑–¥–∞—Ç—å —Å–º–µ—Ç—É –Ω–∞ –ü–ü–û",
            lambda: self._create_estimate('–ü–ü–û'),
            'primary'
        ).pack(side=tk.LEFT, padx=5)
        
        create_styled_button(
            button_frame,
            "‚ûï –°–æ–∑–¥–∞—Ç—å —Å–º–µ—Ç—É –Ω–∞ —Ç—Ä–µ–Ω–µ—Ä–∞ (–£–≠–í–ü)",
            lambda: self._create_estimate('–£–≠–í–ü'),
            'accent'
        ).pack(side=tk.LEFT, padx=5)
        
        create_styled_button(
            button_frame,
            "üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
            self._load_estimates,
            'normal'
        ).pack(side=tk.LEFT, padx=5)
        
        # –°–ø–∏—Å–æ–∫ —Å–º–µ—Ç
        list_frame = ttk.Frame(self.window, padding="10")
        list_frame.pack(fill=tk.BOTH, expand=True)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å–º–µ—Ç
        columns = ('type', 'trainer', 'total', 'items')
        self.tree = ttk.Treeview(list_frame, columns=columns, show='headings', height=15)
        
        self.tree.heading('type', text='–¢–∏–ø —Å–º–µ—Ç—ã')
        self.tree.heading('trainer', text='–¢—Ä–µ–Ω–µ—Ä/–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ')
        self.tree.heading('total', text='–ò—Ç–æ–≥–æ, —Ä—É–±.')
        self.tree.heading('items', text='–°—Ç–∞—Ç–µ–π —Ä–∞—Å—Ö–æ–¥–æ–≤')
        
        self.tree.column('type', width=150)
        self.tree.column('trainer', width=300)
        self.tree.column('total', width=150)
        self.tree.column('items', width=150)
        
        # Scrollbar
        scrollbar = ttk.Scrollbar(list_frame, orient=tk.VERTICAL, command=self.tree.yview)
        self.tree.configure(yscrollcommand=scrollbar.set)
        
        self.tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.tree.bind('<Double-1>', lambda e: self._edit_selected_estimate())
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        action_frame = ttk.Frame(self.window, padding="10")
        action_frame.pack(fill=tk.X)
        
        create_styled_button(
            action_frame,
            "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
            self._edit_selected_estimate,
            'secondary'
        ).pack(side=tk.LEFT, padx=5)
        
        create_styled_button(
            action_frame,
            "üñ®Ô∏è –ü–µ—á–∞—Ç—å —Å–º–µ—Ç—ã",
            self._print_selected_estimate,
            'primary'
        ).pack(side=tk.LEFT, padx=5)
        
        create_styled_button(
            action_frame,
            "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
            self._delete_selected_estimate,
            'normal'
        ).pack(side=tk.LEFT, padx=5)
        
        create_styled_button(
            action_frame,
            "–ó–∞–∫—Ä—ã—Ç—å",
            self.window.destroy,
            'normal'
        ).pack(side=tk.RIGHT, padx=5)
    
    def _load_estimates(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–º–µ—Ç"""
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        for item in self.tree.get_children():
            self.tree.delete(item)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–º–µ—Ç—ã –∏–∑ –ë–î
        estimates_data = self.db.get_estimates_by_event(self.event.id)
        self.estimates = [Estimate.from_db_row(row) for row in estimates_data]
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        for estimate in self.estimates:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π —Ä–∞—Å—Ö–æ–¥–æ–≤
            items = self.db.get_estimate_items(estimate.id)
            items_count = len(items)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
            if estimate.estimate_type == '–£–≠–í–ü' and estimate.trainer_name:
                display_name = estimate.trainer_name
            else:
                display_name = "–°–ø–æ—Ä—Ç—Å–º–µ–Ω—ã (–¥–µ—Ç–∏)"
            
            self.tree.insert('', 'end', values=(
                estimate.estimate_type,
                display_name,
                f"{estimate.total_amount:,.2f}".replace(',', ' '),
                items_count
            ), tags=(estimate.id,))
    
    def _create_estimate(self, estimate_type: str):
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–º–µ—Ç—É"""
        # –°–æ–∑–¥–∞—ë–º –æ–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–Ω–µ—Ä–∞ (–µ—Å–ª–∏ –£–≠–í–ü)
        dialog = EstimateEditDialog(self.window, self.db, self.event, None, estimate_type)
        if dialog.result:
            self._load_estimates()
    
    def _edit_selected_estimate(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–º–µ—Ç—É"""
        selection = self.tree.selection()
        if not selection:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–µ—Ç—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Å–º–µ—Ç—ã
        estimate_id = int(self.tree.item(selection[0], 'tags')[0])
        estimate = next((e for e in self.estimates if e.id == estimate_id), None)
        
        if estimate:
            dialog = EstimateEditDialog(self.window, self.db, self.event, estimate)
            if dialog.result:
                self._load_estimates()
    
    def _delete_selected_estimate(self):
        """–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–º–µ—Ç—É"""
        selection = self.tree.selection()
        if not selection:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–µ—Ç—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–º–µ—Ç—É?\n–í—Å–µ —Å—Ç–∞—Ç—å–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã."):
            estimate_id = int(self.tree.item(selection[0], 'tags')[0])
            self.db.delete_estimate(estimate_id)
            self._load_estimates()
    
    def _print_selected_estimate(self):
        """–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç–∫—Ä—ã—Ç—å —Å–º–µ—Ç—É –¥–ª—è –ø–µ—á–∞—Ç–∏"""
        selection = self.tree.selection()
        if not selection:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–µ—Ç—É –¥–ª—è –ø–µ—á–∞—Ç–∏")
            return
        
        estimate_id = int(self.tree.item(selection[0], 'tags')[0])
        estimate = next((e for e in self.estimates if e.id == estimate_id), None)
        
        if estimate:
            self._generate_estimate_html(estimate)


    def _generate_estimate_html(self, estimate: Estimate):
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å HTML –¥–æ–∫—É–º–µ–Ω—Ç —Å–º–µ—Ç—ã"""
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
        items_data = self.db.get_estimate_items(estimate.id)
        items = [EstimateItem.from_db_row(row) for row in items_data]
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        for item in items:
            if item.category not in categories:
                categories[item.category] = []
            categories[item.category].append(item)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º HTML
        html_content = f"""
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>–°–º–µ—Ç–∞ - {estimate.estimate_type}</title>
    <style>
        @page {{ size: A4; margin: 10mm; }}
        body {{
            font-family: 'Times New Roman', Times, serif;
            font-size: 14px;
            margin: 0;
            padding: 20px;
        }}
        .header {{
            display: flex;
            justify-content: space-between;
            margin-bottom: 30px;
        }}
        .header div {{
            flex: 1;
        }}
        .header .right {{
            text-align: right;
        }}
        .center {{
            text-align: center;
            font-weight: bold;
            margin: 30px 0;
        }}
        table {{
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }}
        th, td {{
            border: 1px solid black;
            padding: 8px;
            text-align: left;
        }}
        th {{
            background-color: #f0f0f0;
            font-weight: bold;
        }}
        .total {{
            font-weight: bold;
            text-align: right;
        }}
        .footer {{
            margin-top: 40px;
        }}
        .signature {{
            display: flex;
            justify-content: space-between;
            margin-top: 20px;
        }}
    </style>
</head>
<body>
    <div class="header">
        <div>
            <strong>–£—Ç–≤–µ—Ä–∂–¥–∞—é</strong><br>
            {html.escape(estimate.approved_by or "–ó–∞–º. –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞ —Ñ –£–≠–í–ü –ø–æ –°–û–∏–ö–ú–†" if estimate.estimate_type == "–£–≠–í–ü" else "–ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å –ü–ü–û –ì–∞–∑–ø—Ä–æ–º –¥–æ–±—ã—á–∞ –Ø–º–±—É—Ä–≥ –ø—Ä–æ—Ñ—Å–æ—é–∑")}<br>
            __________________<br>
            {datetime.now().year} –≥.
        </div>
        <div class="right">
            <strong>–£—Ç–≤–µ—Ä–∂–¥–∞—é</strong><br>
            {"–ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å –ü–ü–û" if estimate.estimate_type == "–£–≠–í–ü" else "–ó–∞–º. –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞ —Ñ –£–≠–í–ü"}<br>
            {"–ì–∞–∑–ø—Ä–æ–º –¥–æ–±—ã—á–∞ –Ø–º–±—É—Ä–≥ –ø—Ä–æ—Ñ—Å–æ—é–∑" if estimate.estimate_type == "–£–≠–í–ü" else ""}<br>
            __________________<br>
            {datetime.now().year} –≥.
        </div>
    </div>
    
    <div class="center">
        –°–ú–ï–¢–ê<br>
        –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–æ—á–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ {'—Ç—Ä–µ–Ω–µ—Ä–∞' if estimate.estimate_type == '–£–≠–í–ü' else ''} –¥–ª—è —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤ –î–Æ–°–ö "–Ø–º–±—É—Ä–≥",<br>
        {html.escape(self.event.name)}
    </div>
    
    <p><strong>–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:</strong> {html.escape(estimate.place or self.event.location)}</p>
    <p><strong>–°—Ä–æ–∫–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:</strong> {html.escape(estimate.start_date or '')} - {html.escape(estimate.end_date or '')}</p>
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–µ—Ä–∞ –¥–ª—è —Å–º–µ—Ç –£–≠–í–ü
        if estimate.estimate_type == '–£–≠–í–ü' and estimate.trainer_name:
            html_content += f"    <p><strong>—Ç—Ä–µ–Ω–µ—Ä:</strong> {html.escape(estimate.trainer_name)}</p>\n"
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
        html_content += """
    <table>
        <thead>
            <tr>
                <th>‚Ññ</th>
                <th>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤</th>
                <th>–ö–æ–ª-–≤–æ —á–µ–ª.</th>
                <th>–î–Ω–∏/–°—Ç–æ—Ä–æ–Ω—ã</th>
                <th>–°—Ç–∞–≤–∫–∞, —Ä—É–±.</th>
                <th>–°—É–º–º–∞, —Ä—É–±.</th>
            </tr>
        </thead>
        <tbody>
"""
        
        item_number = 1
        category_order = ['–ü—Ä–æ–µ–∑–¥', '–ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ', '–°—É—Ç–æ—á–Ω—ã–µ', '–ü–∏—Ç–∞–Ω–∏–µ']
        
        for category in category_order:
            if category in categories:
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                html_content += f"""
            <tr>
                <td><strong>{item_number}.</strong></td>
                <td colspan="5"><strong>{category}</strong></td>
            </tr>
"""
                
                for item in categories[category]:
                    desc = html.escape(item.description) if item.description else ""
                    html_content += f"""
            <tr>
                <td></td>
                <td>{desc}</td>
                <td style="text-align: center;">{item.people_count}</td>
                <td style="text-align: center;">{item.days_count}</td>
                <td style="text-align: right;">{item.rate:,.2f}</td>
                <td style="text-align: right;">{item.total:,.2f}</td>
            </tr>
"""
                item_number += 1
        
        # –ò—Ç–æ–≥–æ
        html_content += f"""
            <tr class="total">
                <td colspan="5">–ò–¢–û–ì–û –ø–æ —Å–º–µ—Ç–µ:</td>
                <td style="text-align: right;">{estimate.total_amount:,.2f}</td>
            </tr>
        </tbody>
    </table>
    
    <div class="footer">
        <div class="signature">
            <div>
                –ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –Ω–∞—á–∞–ª—å–Ω–∏–∫–∞ –î–Æ–°–ö "–Ø–º–±—É—Ä–≥"
            </div>
            <div>
                –ê.–°. –í–¥–æ–≤–∏–∫–∏–Ω
            </div>
        </div>
    </div>
</body>
</html>
"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º
        filename = f"smeta_{estimate.estimate_type}_{estimate.id}.html"
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ
        webbrowser.open('file://' + os.path.realpath(filename))
        messagebox.showinfo("–£—Å–ø–µ—à–Ω–æ", f"–°–º–µ—Ç–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –∏ –æ—Ç–∫—Ä—ã—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ:\n{filename}")


class EstimateEditDialog:
    """–î–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ—Ç—ã"""
    
    def __init__(self, parent, db, event: Event, estimate: Estimate = None, estimate_type: str = None):
        """
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
            db: –û–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            event: –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
            estimate: –°–º–µ—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (None –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è)
            estimate_type: –¢–∏–ø —Å–º–µ—Ç—ã ('–ü–ü–û' –∏–ª–∏ '–£–≠–í–ü') –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
        """
        self.db = db
        self.event = event
        self.estimate = estimate
        self.estimate_type = estimate_type if estimate_type else (estimate.estimate_type if estimate else '–ü–ü–û')
        self.result = False
        
        # –°–æ–∑–¥–∞—ë–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ
        self.window = tk.Toplevel(parent)
        self.window.title("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ—Ç—ã" if estimate else "–°–æ–∑–¥–∞–Ω–∏–µ —Å–º–µ—Ç—ã")
        self.window.geometry("900x700")
        self.window.transient(parent)
        self.window.grab_set()
        
        apply_styles(self.window)
        
        self._create_widgets()
        
        if estimate:
            self._load_estimate_data()
        
        self.window.wait_window()
    
    def _create_widgets(self):
        """–°–æ–∑–¥–∞—Ç—å –≤–∏–¥–∂–µ—Ç—ã –¥–∏–∞–ª–æ–≥–∞"""
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
        info_frame = ttk.Frame(self.window, padding="10")
        info_frame.pack(fill=tk.X)
        
        ttk.Label(info_frame, text=f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {self.event.name}", font=(FONT_FAMILY, 11, 'bold')).pack(anchor='w')
        ttk.Label(info_frame, text=f"–ú–µ—Å—Ç–æ: {self.event.location}", font=(FONT_FAMILY, 9)).pack(anchor='w')
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–º–µ—Ç—ã
        main_frame = ttk.LabelFrame(self.window, text=f"–°–º–µ—Ç–∞ {self.estimate_type}", padding="10")
        main_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # –¢—Ä–µ–Ω–µ—Ä (—Ç–æ–ª—å–∫–æ –¥–ª—è –£–≠–í–ü)
        if self.estimate_type == '–£–≠–í–ü':
            ttk.Label(main_frame, text="–§–ò–û —Ç—Ä–µ–Ω–µ—Ä–∞:").grid(row=0, column=0, sticky='w', pady=5)
            self.trainer_var = tk.StringVar()
            ttk.Entry(main_frame, textvariable=self.trainer_var, width=50).grid(row=0, column=1, pady=5, sticky='ew')
        
        # –ú–µ—Å—Ç–æ –∏ –¥–∞—Ç—ã
        ttk.Label(main_frame, text="–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:").grid(row=1, column=0, sticky='w', pady=5)
        self.place_var = tk.StringVar(value=self.event.location)
        ttk.Entry(main_frame, textvariable=self.place_var, width=50).grid(row=1, column=1, pady=5, sticky='ew')
        
        ttk.Label(main_frame, text="–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:").grid(row=2, column=0, sticky='w', pady=5)
        self.start_date_var = tk.StringVar()
        ttk.Entry(main_frame, textvariable=self.start_date_var, width=20).grid(row=2, column=1, pady=5, sticky='w')
        
        ttk.Label(main_frame, text="–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:").grid(row=3, column=0, sticky='w', pady=5)
        self.end_date_var = tk.StringVar()
        ttk.Entry(main_frame, textvariable=self.end_date_var, width=20).grid(row=3, column=1, pady=5, sticky='w')
        
        main_frame.columnconfigure(1, weight=1)
        
        # –°—Ç–∞—Ç—å–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
        items_frame = ttk.LabelFrame(self.window, text="–°—Ç–∞—Ç—å–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤", padding="10")
        items_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π
        btn_frame = ttk.Frame(items_frame)
        btn_frame.pack(fill=tk.X, pady=5)
        
        ttk.Button(btn_frame, text="‚ûï –ü—Ä–æ–µ–∑–¥", command=lambda: self._add_item('–ü—Ä–æ–µ–∑–¥')).pack(side=tk.LEFT, padx=2)
        ttk.Button(btn_frame, text="‚ûï –ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ", command=lambda: self._add_item('–ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ')).pack(side=tk.LEFT, padx=2)
        ttk.Button(btn_frame, text="‚ûï –°—É—Ç–æ—á–Ω—ã–µ", command=lambda: self._add_item('–°—É—Ç–æ—á–Ω—ã–µ')).pack(side=tk.LEFT, padx=2)
        ttk.Button(btn_frame, text="‚ûï –ü–∏—Ç–∞–Ω–∏–µ", command=lambda: self._add_item('–ü–∏—Ç–∞–Ω–∏–µ')).pack(side=tk.LEFT, padx=2)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–µ–π
        columns = ('category', 'description', 'people', 'days', 'rate', 'total')
        self.items_tree = ttk.Treeview(items_frame, columns=columns, show='headings', height=10)
        
        self.items_tree.heading('category', text='–ö–∞—Ç–µ–≥–æ—Ä–∏—è')
        self.items_tree.heading('description', text='–û–ø–∏—Å–∞–Ω–∏–µ/–ú–∞—Ä—à—Ä—É—Ç')
        self.items_tree.heading('people', text='–ß–µ–ª.')
        self.items_tree.heading('days', text='–î–Ω–∏')
        self.items_tree.heading('rate', text='–°—Ç–∞–≤–∫–∞')
        self.items_tree.heading('total', text='–°—É–º–º–∞')
        
        self.items_tree.column('category', width=100)
        self.items_tree.column('description', width=250)
        self.items_tree.column('people', width=60)
        self.items_tree.column('days', width=60)
        self.items_tree.column('rate', width=100)
        self.items_tree.column('total', width=100)
        
        scrollbar = ttk.Scrollbar(items_frame, orient=tk.VERTICAL, command=self.items_tree.yview)
        self.items_tree.configure(yscrollcommand=scrollbar.set)
        
        self.items_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.items_tree.bind('<Double-1>', lambda e: self._edit_item())
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞–¥ —Å—Ç–∞—Ç—å—è–º–∏
        items_btn_frame = ttk.Frame(items_frame)
        items_btn_frame.pack(fill=tk.X, pady=5)
        
        ttk.Button(items_btn_frame, text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", command=self._edit_item).pack(side=tk.LEFT, padx=2)
        ttk.Button(items_btn_frame, text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", command=self._delete_item).pack(side=tk.LEFT, padx=2)
        
        # –ò—Ç–æ–≥–æ
        total_frame = ttk.Frame(self.window, padding="10")
        total_frame.pack(fill=tk.X)
        
        self.total_label = ttk.Label(total_frame, text="–ò–¢–û–ì–û: 0.00 —Ä—É–±.", font=(FONT_FAMILY, 12, 'bold'))
        self.total_label.pack(side=tk.RIGHT)
        
        # –ö–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã
        button_frame = ttk.Frame(self.window, padding="10")
        button_frame.pack(fill=tk.X)
        
        create_styled_button(button_frame, "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", self._save, 'primary').pack(side=tk.LEFT, padx=5)
        create_styled_button(button_frame, "–û—Ç–º–µ–Ω–∞", self.window.destroy, 'normal').pack(side=tk.LEFT, padx=5)
    
    def _load_estimate_data(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–º–µ—Ç—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if self.estimate_type == '–£–≠–í–ü' and self.estimate.trainer_name:
            self.trainer_var.set(self.estimate.trainer_name)
        
        self.place_var.set(self.estimate.place or '')
        self.start_date_var.set(self.estimate.start_date or '')
        self.end_date_var.set(self.estimate.end_date or '')
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—å–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
        items_data = self.db.get_estimate_items(self.estimate.id)
        for item_data in items_data:
            item = EstimateItem.from_db_row(item_data)
            self.items_tree.insert('', 'end', values=(
                item.category,
                item.description,
                item.people_count,
                item.days_count,
                f"{item.rate:.2f}",
                f"{item.total:.2f}"
            ), tags=(item.id,))
        
        self._update_total()
    
    def _add_item(self, category: str):
        """–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—å—é —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        dialog = EstimateItemDialog(self.window, category)
        if dialog.result:
            self.items_tree.insert('', 'end', values=(
                dialog.category,
                dialog.description,
                dialog.people_count,
                dialog.days_count,
                f"{dialog.rate:.2f}",
                f"{dialog.total:.2f}"
            ), tags=(None,))  # None –æ–∑–Ω–∞—á–∞–µ—Ç –Ω–æ–≤–∞—è —Å—Ç–∞—Ç—å—è
            self._update_total()
    
    def _edit_item(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å—é —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        selection = self.items_tree.selection()
        if not selection:
            return
        
        item = self.items_tree.item(selection[0])
        values = item['values']
        
        dialog = EstimateItemDialog(
            self.window,
            category=values[0],
            description=values[1],
            people_count=int(values[2]),
            days_count=int(values[3]),
            rate=float(values[4])
        )
        
        if dialog.result:
            self.items_tree.item(selection[0], values=(
                dialog.category,
                dialog.description,
                dialog.people_count,
                dialog.days_count,
                f"{dialog.rate:.2f}",
                f"{dialog.total:.2f}"
            ))
            self._update_total()
    
    def _delete_item(self):
        """–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—å—é —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        selection = self.items_tree.selection()
        if selection:
            self.items_tree.delete(selection[0])
            self._update_total()
    
    def _update_total(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É"""
        total = 0.0
        for item in self.items_tree.get_children():
            values = self.items_tree.item(item, 'values')
            total += float(values[5])
        
        self.total_label.config(text=f"–ò–¢–û–ì–û: {total:,.2f} —Ä—É–±.".replace(',', ' '))
    
    def _save(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–º–µ—Ç—É"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if self.estimate_type == '–£–≠–í–ü' and not self.trainer_var.get().strip():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ –§–ò–û —Ç—Ä–µ–Ω–µ—Ä–∞ –¥–ª—è —Å–º–µ—Ç—ã –£–≠–í–ü")
            return
        
        # –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–º–µ—Ç—É
        if self.estimate:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            trainer_name = self.trainer_var.get() if self.estimate_type == '–£–≠–í–ü' else None
            self.db.update_estimate(
                self.estimate.id,
                trainer_name=trainer_name,
                place=self.place_var.get(),
                start_date=self.start_date_var.get(),
                end_date=self.end_date_var.get()
            )
            estimate_id = self.estimate.id
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Ç–∞—Ç—å–∏
            old_items = self.db.get_estimate_items(estimate_id)
            for old_item in old_items:
                self.db.delete_estimate_item(old_item[0])
        else:
            # –°–æ–∑–¥–∞–Ω–∏–µ
            trainer_name = self.trainer_var.get() if self.estimate_type == '–£–≠–í–ü' else None
            estimate_id = self.db.create_estimate(
                self.event.id,
                self.estimate_type,
                trainer_name=trainer_name,
                place=self.place_var.get(),
                start_date=self.start_date_var.get(),
                end_date=self.end_date_var.get()
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—å–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
        for item in self.items_tree.get_children():
            values = self.items_tree.item(item, 'values')
            self.db.add_estimate_item(
                estimate_id,
                category=values[0],
                description=values[1],
                people_count=int(values[2]),
                days_count=int(values[3]),
                rate=float(values[4])
            )
        
        self.result = True
        self.window.destroy()


class EstimateItemDialog:
    """–î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    
    def __init__(self, parent, category: str = "", description: str = "",
                 people_count: int = 0, days_count: int = 0, rate: float = 0.0):
        self.result = False
        self.category = category
        self.description = description
        self.people_count = people_count
        self.days_count = days_count
        self.rate = rate
        self.total = 0.0
        
        # –°–æ–∑–¥–∞—ë–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ
        self.window = tk.Toplevel(parent)
        self.window.title(f"–°—Ç–∞—Ç—å—è —Ä–∞—Å—Ö–æ–¥–æ–≤ - {category}")
        self.window.geometry("500x350")
        self.window.transient(parent)
        self.window.grab_set()
        
        apply_styles(self.window)
        
        self._create_widgets()
        self._calculate_total()
        
        self.window.wait_window()
    
    def _create_widgets(self):
        """–°–æ–∑–¥–∞—Ç—å –≤–∏–¥–∂–µ—Ç—ã –¥–∏–∞–ª–æ–≥–∞"""
        main_frame = ttk.Frame(self.window, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
        ttk.Label(main_frame, text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è:", font=(FONT_FAMILY, 10, 'bold')).grid(row=0, column=0, sticky='w', pady=5)
        ttk.Label(main_frame, text=self.category, font=(FONT_FAMILY, 10)).grid(row=0, column=1, sticky='w', pady=5)
        
        # –û–ø–∏—Å–∞–Ω–∏–µ/–º–∞—Ä—à—Ä—É—Ç
        ttk.Label(main_frame, text="–û–ø–∏—Å–∞–Ω–∏–µ/–ú–∞—Ä—à—Ä—É—Ç:").grid(row=1, column=0, sticky='w', pady=5)
        self.desc_var = tk.StringVar(value=self.description)
        ttk.Entry(main_frame, textvariable=self.desc_var, width=40).grid(row=1, column=1, sticky='ew', pady=5)
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫
        ttk.Label(main_frame, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫:").grid(row=2, column=0, sticky='w', pady=5)
        self.people_var = tk.IntVar(value=self.people_count)
        people_spin = ttk.Spinbox(main_frame, from_=0, to=100, textvariable=self.people_var, width=10)
        people_spin.grid(row=2, column=1, sticky='w', pady=5)
        people_spin.bind('<KeyRelease>', lambda e: self._calculate_total())
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
        ttk.Label(main_frame, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π/—Å—Ç–æ—Ä–æ–Ω:").grid(row=3, column=0, sticky='w', pady=5)
        self.days_var = tk.IntVar(value=self.days_count)
        days_spin = ttk.Spinbox(main_frame, from_=0, to=100, textvariable=self.days_var, width=10)
        days_spin.grid(row=3, column=1, sticky='w', pady=5)
        days_spin.bind('<KeyRelease>', lambda e: self._calculate_total())
        
        # –°—Ç–∞–≤–∫–∞
        ttk.Label(main_frame, text="–°—Ç–∞–≤–∫–∞, —Ä—É–±.:").grid(row=4, column=0, sticky='w', pady=5)
        self.rate_var = tk.DoubleVar(value=self.rate)
        rate_entry = ttk.Entry(main_frame, textvariable=self.rate_var, width=15)
        rate_entry.grid(row=4, column=1, sticky='w', pady=5)
        rate_entry.bind('<KeyRelease>', lambda e: self._calculate_total())
        
        # –°—É–º–º–∞
        ttk.Label(main_frame, text="–ò—Ç–æ–≥–æ:").grid(row=5, column=0, sticky='w', pady=5)
        self.total_label = ttk.Label(main_frame, text="0.00 —Ä—É–±.", font=(FONT_FAMILY, 11, 'bold'))
        self.total_label.grid(row=5, column=1, sticky='w', pady=5)
        
        main_frame.columnconfigure(1, weight=1)
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(self.window, padding="10")
        button_frame.pack(fill=tk.X)
        
        create_styled_button(button_frame, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", self._save, 'primary').pack(side=tk.LEFT, padx=5)
        create_styled_button(button_frame, "–û—Ç–º–µ–Ω–∞", self.window.destroy, 'normal').pack(side=tk.LEFT, padx=5)
    
    def _calculate_total(self):
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É"""
        try:
            people = self.people_var.get()
            days = self.days_var.get()
            rate = self.rate_var.get()
            self.total = people * days * rate
            self.total_label.config(text=f"{self.total:,.2f} —Ä—É–±.".replace(',', ' '))
        except:
            pass
    
    def _save(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç—å—é"""
        self.description = self.desc_var.get()
        self.people_count = self.people_var.get()
        self.days_count = self.days_var.get()
        self.rate = self.rate_var.get()
        self.result = True
        self.window.destroy()

