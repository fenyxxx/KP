# -*- coding: utf-8 -*-
"""
–û–∫–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
"""

import tkinter as tk
from tkinter import ttk, scrolledtext, filedialog, messagebox
from constants import MONTHS
from models import Event
from styles import MONOSPACE_FONT
import csv
import html
import webbrowser
import os


def format_rubles(amount):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º—É –≤ —Ä–æ—Å—Å–∏–π—Å–∫–æ–º —Å—Ç–∏–ª–µ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
    
    Args:
        amount: –°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "1 234 567 —Ä—É–±.")
    """
    if amount is None or amount == 0:
        return "0 —Ä—É–±."
    
    # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ä—É–±–ª–µ–π
    amount = int(round(amount))
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
    formatted = "{:,}".format(amount).replace(',', ' ')
    
    return f"{formatted} —Ä—É–±."


def format_number_ru(number, decimals=2):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∏—Å–ª–æ –¥–ª—è Excel (—Ä—É—Å—Å–∫–∞—è –ª–æ–∫–∞–ª—å) - —Å –∑–∞–ø—è—Ç–æ–π –≤–º–µ—Å—Ç–æ —Ç–æ—á–∫–∏
    
    Args:
        number: –ß–∏—Å–ª–æ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        decimals: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2)
        
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å —á–∏—Å–ª–æ–º, –≥–¥–µ –¥–µ—Å—è—Ç–∏—á–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å - –∑–∞–ø—è—Ç–∞—è
    """
    if number is None:
        return ""
    if number == 0 or number == 0.0:
        return "0"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ —Å –Ω—É–∂–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏
    formatted = f"{number:.{decimals}f}"
    
    # –ó–∞–º–µ–Ω—è–µ–º —Ç–æ—á–∫—É –Ω–∞ –∑–∞–ø—è—Ç—É—é –¥–ª—è Excel
    formatted = formatted.replace('.', ',')
    
    return formatted


def format_number(amount):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∏—Å–ª–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á (–±–µ–∑ –≤–∞–ª—é—Ç—ã)
    
    Args:
        amount: –ß–∏—Å–ª–æ
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "1 234 567")
    """
    if amount is None or amount == 0:
        return "0"
    
    # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª–æ–≥–æ
    amount = int(round(amount))
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
    formatted = "{:,}".format(amount).replace(',', ' ')
    
    return formatted


class ViewPlanWindow:
    """–ö–ª–∞—Å—Å –æ–∫–Ω–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"""
    
    def __init__(self, parent, db, year: int, initial_report_type: str = 'full'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫–Ω–∞
        
        Args:
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
            db: –û–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            year: –ì–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            initial_report_type: –ù–∞—á–∞–ª—å–Ω—ã–π —Ç–∏–ø –æ—Ç—á—ë—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        self.parent = parent
        self.db = db
        self.year = year
        self.current_report_type = initial_report_type  # –¢–µ–∫—É—â–∏–π —Ç–∏–ø –æ—Ç—á—ë—Ç–∞
        
        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ
        self.window = tk.Toplevel(parent)
        self.window.title(f"–ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω {year}")
        
        # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –æ–∫–Ω–æ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω (–∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ)
        try:
            # –ü—Ä–æ–±—É–µ–º Windows-—Å–ø–æ—Å–æ–±
            self.window.state('zoomed')
        except:
            # –î–ª—è Linux (Red OS) - —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ geometry
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
                screen_width = self.window.winfo_screenwidth()
                screen_height = self.window.winfo_screenheight()
                self.window.geometry(f"{screen_width}x{screen_height}+0+0")
            except:
                # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä
                self.window.geometry("1400x900")
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.window.transient(parent)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ (–¥–ª—è Red OS –∏ –¥—Ä—É–≥–∏—Ö —Å–∏—Å—Ç–µ–º)
        self.window.protocol("WM_DELETE_WINDOW", self.window.destroy)
        
        self._create_widgets()
        self._show_report(initial_report_type)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—Ç—á—ë—Ç–∞
    
    def _create_widgets(self):
        """–°–æ–∑–¥–∞—Ç—å –≤–∏–¥–∂–µ—Ç—ã –æ–∫–Ω–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = ttk.Label(
            self.window, 
            text=f"–ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ {self.year} –≥–æ–¥",
            font=('Arial', 14, 'bold')
        )
        header.pack(pady=10)
        
        # –ü–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç—á—ë—Ç–æ–≤
        button_frame = ttk.Frame(self.window)
        button_frame.pack(fill=tk.X, padx=10, pady=(0, 10))
        
        ttk.Label(button_frame, text="–¢–∏–ø –æ—Ç—á—ë—Ç–∞:", font=('Arial', 10, 'bold')).pack(side=tk.LEFT, padx=5)
        
        ttk.Button(
            button_frame, text="–ü–æ–ª–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω", 
            command=lambda: self._show_report('full')
        ).pack(side=tk.LEFT, padx=2)
        
        ttk.Button(
            button_frame, text="–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç", 
            command=lambda: self._show_report('financial')
        ).pack(side=tk.LEFT, padx=2)
        
        ttk.Button(
            button_frame, text="–ü–æ –≤–∏–¥–∞–º —Å–ø–æ—Ä—Ç–∞", 
            command=lambda: self._show_report('sports')
        ).pack(side=tk.LEFT, padx=2)
        
        ttk.Button(
            button_frame, text="–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º", 
            command=lambda: self._show_report('status')
        ).pack(side=tk.LEFT, padx=2)
        
        ttk.Button(
            button_frame, text="–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞", 
            command=lambda: self._show_report('summary')
        ).pack(side=tk.LEFT, padx=2)
        
        ttk.Button(
            button_frame, text="–ü–æ —Ç–∏–ø–∞–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", 
            command=lambda: self._show_report('by_type')
        ).pack(side=tk.LEFT, padx=2)
        
        ttk.Button(
            button_frame, text="üìä –ì–æ–¥–æ–≤–æ–π –æ—Ç—á–µ—Ç –ü–ü–û", 
            command=lambda: self._show_report('annual_ppo'),
            style='Accent.TButton'
        ).pack(side=tk.LEFT, padx=2)
        
        ttk.Button(
            button_frame, text="üìã –ì–æ–¥–æ–≤–æ–π –æ—Ç—á–µ—Ç –£–≠–í–ü", 
            command=lambda: self._show_report('annual_uevp'),
            style='Accent.TButton'
        ).pack(side=tk.LEFT, padx=2)
        
        # –ü–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_frame = ttk.Frame(self.window)
        save_frame.pack(fill=tk.X, padx=10, pady=(0, 5))
        
        ttk.Label(save_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å:", font=('Arial', 10, 'bold')).pack(side=tk.LEFT, padx=5)
        
        ttk.Button(
            save_frame, text="TXT", 
            command=lambda: self._save_report('txt')
        ).pack(side=tk.LEFT, padx=2)
        
        ttk.Button(
            save_frame, text="CSV", 
            command=lambda: self._save_report('csv')
        ).pack(side=tk.LEFT, padx=2)
        
        ttk.Button(
            save_frame, text="HTML", 
            command=lambda: self._save_report('html')
        ).pack(side=tk.LEFT, padx=2)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        self.text_area = scrolledtext.ScrolledText(
            self.window, 
            wrap=tk.WORD, 
            width=100, 
            height=35,
            font=(MONOSPACE_FONT, 10)
        )
        self.text_area.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        ttk.Button(
            self.window, 
            text="–ó–∞–∫—Ä—ã—Ç—å", 
            command=self.window.destroy
        ).pack(pady=10)
    
    def _show_report(self, report_type):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—Ç—á—ë—Ç–∞"""
        self.current_report_type = report_type  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏–ø
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞
        report_titles = {
            'full': '–ü–æ–ª–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω',
            'financial': '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç',
            'sports': '–û—Ç—á—ë—Ç –ø–æ –≤–∏–¥–∞–º —Å–ø–æ—Ä—Ç–∞',
            'status': '–û—Ç—á—ë—Ç –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º',
            'summary': '–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞',
            'by_type': '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç –ø–æ —Ç–∏–ø–∞–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π',
            'annual_ppo': '–ì–æ–¥–æ–≤–æ–π –æ—Ç—á–µ—Ç –ü–ü–û',
            'annual_uevp': '–ì–æ–¥–æ–≤–æ–π –æ—Ç—á–µ—Ç –£–≠–í–ü - –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–æ—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã'
        }
        title = report_titles.get(report_type, '–ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω')
        self.window.title(f"{title} - {self.year}")
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
        self.text_area.config(state='normal')
        self.text_area.delete('1.0', tk.END)
        
        if report_type == 'full':
            self._load_full_plan()
        elif report_type == 'financial':
            self._load_financial_report()
        elif report_type == 'sports':
            self._load_sports_report()
        elif report_type == 'status':
            self._load_status_report()
        elif report_type == 'summary':
            self._load_summary_report()
        elif report_type == 'by_type':
            self._load_by_type_report()
        elif report_type == 'annual_ppo':
            self._load_annual_ppo_report()
        elif report_type == 'annual_uevp':
            self._load_annual_uevp_report()
        
        self.text_area.config(state='disabled')
    
    def _load_full_plan(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∑–∞ –≥–æ–¥
        events_data = self.db.get_events_by_year(self.year)
        
        if not events_data:
            self.text_area.insert('1.0', "–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–∞ —ç—Ç–æ—Ç –≥–æ–¥")
            return
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç—ã Event
        events = [Event.from_db_row(row) for row in events_data]
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–µ—Å—è—Ü–∞–º
        events_by_month = {}
        for event in events:
            if event.month not in events_by_month:
                events_by_month[event.month] = []
            events_by_month[event.month].append(event)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–ª–∞–Ω–∞
        plan_text = ""
        plan_text += "=" * 90 + "\n"
        plan_text += f"–ö–ê–õ–ï–ù–î–ê–†–ù–´–ô –ü–õ–ê–ù –ù–ê {self.year} –ì–û–î\n"
        plan_text += "=" * 90 + "\n\n"
        
        # –ò—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã
        total_children_budget = 0
        total_trainers_budget = 0
        total_events = len(events)
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –º–µ—Å—è—Ü–∞–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        for month in MONTHS:
            if month not in events_by_month:
                continue
            
            month_events = events_by_month[month]
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∏ –≤—ã–µ–∑–¥–Ω—ã–µ
            internal_events = [e for e in month_events if e.event_type == "–í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ"]
            external_events = [e for e in month_events if e.event_type == "–í—ã–µ–∑–¥–Ω–æ–µ"]
            
            plan_text += "-" * 90 + "\n"
            plan_text += f"{month.upper()}\n"
            plan_text += "-" * 90 + "\n\n"
            
            # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            if internal_events:
                plan_text += "–í–ù–£–¢–†–ï–ù–ù–ò–ï –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø:\n\n"
                for i, event in enumerate(internal_events, 1):
                    plan_text += f"{i}. {event.sport}"
                    
                    # –°—Ç–∞—Ç—É—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                    if event.status and event.status != "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ":
                        plan_text += f" [{event.status.upper()}]"
                    plan_text += "\n"
                    
                    plan_text += f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {event.name}\n"
                    plan_text += f"   –ú–µ—Å—Ç–æ: {event.location}\n"
                    
                    # –î–∞—Ç—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
                    if event.actual_start_date or event.actual_end_date:
                        dates = []
                        if event.actual_start_date:
                            dates.append(event.actual_start_date)
                        if event.actual_end_date and event.actual_end_date != event.actual_start_date:
                            dates.append(event.actual_end_date)
                        plan_text += f"   –î–∞—Ç—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {' - '.join(dates)}\n"
                    
                    # –ë—é–¥–∂–µ—Ç
                    plan_text += f"   –°—É–º–º–∞ –Ω–∞ –¥–µ—Ç–µ–π: {format_rubles(event.children_budget)}"
                    if event.actual_children_budget is not None:
                        plan_text += f" (—Ñ–∞–∫—Ç: {format_rubles(event.actual_children_budget)})"
                    plan_text += "\n"
                    
                    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–Ω–µ—Ä–∞—Ö
                    if event.trainers_list:
                        total_budget = sum(t.get('budget', 0) for t in event.trainers_list)
                        plan_text += f"   –¢—Ä–µ–Ω–µ—Ä—ã ({len(event.trainers_list)} —á–µ–ª.): {format_rubles(total_budget)}"
                        if event.actual_trainers_budget is not None:
                            plan_text += f" (—Ñ–∞–∫—Ç: {format_rubles(event.actual_trainers_budget)})"
                        plan_text += "\n"
                        for i, trainer in enumerate(event.trainers_list, 1):
                            plan_text += f"     {i}. {trainer.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')} - {format_rubles(trainer.get('budget', 0))}\n"
                    else:
                        plan_text += f"   –¢—Ä–µ–Ω–µ—Ä–æ–≤: {event.trainers_count}, —Å—É–º–º–∞: {format_rubles(event.trainers_budget)}"
                        if event.actual_trainers_budget is not None:
                            plan_text += f" (—Ñ–∞–∫—Ç: {format_rubles(event.actual_trainers_budget)})"
                        plan_text += "\n"
                    
                    # –ü—Ä–∏—á–∏–Ω—ã –æ—Ç–º–µ–Ω—ã/–ø–µ—Ä–µ–Ω–æ—Å–∞
                    if event.status == "–û—Ç–º–µ–Ω–µ–Ω–æ" and event.cancellation_reason:
                        plan_text += f"   –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã: {event.cancellation_reason}\n"
                    elif event.status == "–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ" and event.postponement_reason:
                        plan_text += f"   –ü—Ä–∏—á–∏–Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞: {event.postponement_reason}\n"
                    
                    if event.notes:
                        plan_text += f"   –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {event.notes}\n"
                    plan_text += "\n"
            
            # –í—ã–µ–∑–¥–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            if external_events:
                plan_text += "–í–´–ï–ó–î–ù–´–ï –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø:\n\n"
                for i, event in enumerate(external_events, 1):
                    plan_text += f"{i}. {event.sport}"
                    
                    # –°—Ç–∞—Ç—É—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                    if event.status and event.status != "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ":
                        plan_text += f" [{event.status.upper()}]"
                    plan_text += "\n"
                    
                    plan_text += f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {event.name}\n"
                    plan_text += f"   –ú–µ—Å—Ç–æ: {event.location}\n"
                    
                    # –î–∞—Ç—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
                    if event.actual_start_date or event.actual_end_date:
                        dates = []
                        if event.actual_start_date:
                            dates.append(event.actual_start_date)
                        if event.actual_end_date and event.actual_end_date != event.actual_start_date:
                            dates.append(event.actual_end_date)
                        plan_text += f"   –î–∞—Ç—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {' - '.join(dates)}\n"
                    
                    # –ë—é–¥–∂–µ—Ç
                    plan_text += f"   –°—É–º–º–∞ –Ω–∞ –¥–µ—Ç–µ–π: {format_rubles(event.children_budget)}"
                    if event.actual_children_budget is not None:
                        plan_text += f" (—Ñ–∞–∫—Ç: {format_rubles(event.actual_children_budget)})"
                    plan_text += "\n"
                    
                    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–Ω–µ—Ä–∞—Ö
                    if event.trainers_list:
                        total_budget = sum(t.get('budget', 0) for t in event.trainers_list)
                        plan_text += f"   –¢—Ä–µ–Ω–µ—Ä—ã ({len(event.trainers_list)} —á–µ–ª.): {format_rubles(total_budget)}"
                        if event.actual_trainers_budget is not None:
                            plan_text += f" (—Ñ–∞–∫—Ç: {format_rubles(event.actual_trainers_budget)})"
                        plan_text += "\n"
                        for i, trainer in enumerate(event.trainers_list, 1):
                            plan_text += f"     {i}. {trainer.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')} - {format_rubles(trainer.get('budget', 0))}\n"
                    else:
                        plan_text += f"   –¢—Ä–µ–Ω–µ—Ä–æ–≤: {event.trainers_count}, —Å—É–º–º–∞: {format_rubles(event.trainers_budget)}"
                        if event.actual_trainers_budget is not None:
                            plan_text += f" (—Ñ–∞–∫—Ç: {format_rubles(event.actual_trainers_budget)})"
                        plan_text += "\n"
                    
                    # –ü—Ä–∏—á–∏–Ω—ã –æ—Ç–º–µ–Ω—ã/–ø–µ—Ä–µ–Ω–æ—Å–∞
                    if event.status == "–û—Ç–º–µ–Ω–µ–Ω–æ" and event.cancellation_reason:
                        plan_text += f"   –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã: {event.cancellation_reason}\n"
                    elif event.status == "–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ" and event.postponement_reason:
                        plan_text += f"   –ü—Ä–∏—á–∏–Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞: {event.postponement_reason}\n"
                    
                    if event.notes:
                        plan_text += f"   –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {event.notes}\n"
                    plan_text += "\n"
            
            plan_text += "\n"
        
        # –ò—Ç–æ–≥–∏ - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        plan_text += "=" * 90 + "\n"
        plan_text += "–ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n"
        plan_text += "=" * 90 + "\n"
        
        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        plan_text += f"–í—Å–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {total_events}\n"
        
        # –ü–æ–¥—Å—á–µ—Ç –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        status_counts = {}
        for event in events:
            status = event.status or "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ"
            status_counts[status] = status_counts.get(status, 0) + 1
        
        if status_counts:
            plan_text += "\n–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:\n"
            for status, count in sorted(status_counts.items()):
                plan_text += f"  {status}: {count}\n"
        
        plan_text += "\n" + "-" * 90 + "\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∏–¥–∞–º —Å–ø–æ—Ä—Ç–∞
        plan_text += "\n–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–ò–î–ê–ú –°–ü–û–†–¢–ê:\n"
        plan_text += "-" * 90 + "\n"
        
        sport_stats = {}
        for event in events:
            if event.sport not in sport_stats:
                sport_stats[event.sport] = {
                    'count': 0,
                    'plan_children': 0,
                    'fact_children': 0,
                    'plan_trainers': 0,
                    'fact_trainers': 0,
                    'plan_children_completed': 0,  # –ü–ª–∞–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö
                    'plan_trainers_completed': 0   # –ü–ª–∞–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö
                }
            
            sport_stats[event.sport]['count'] += 1
            sport_stats[event.sport]['plan_children'] += event.children_budget
            sport_stats[event.sport]['plan_trainers'] += event.trainers_budget
            
            # –§–∞–∫—Ç –∏ –ø–ª–∞–Ω –¥–ª—è –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö (–¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —ç–∫–æ–Ω–æ–º–∏–∏/–ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥–∞)
            if event.status in ["–ü—Ä–æ–≤–µ–¥–µ–Ω–æ", "–û—Ç–º–µ–Ω–µ–Ω–æ"]:
                sport_stats[event.sport]['plan_children_completed'] += event.children_budget
                sport_stats[event.sport]['plan_trainers_completed'] += event.trainers_budget
                
                if event.status == "–ü—Ä–æ–≤–µ–¥–µ–Ω–æ":
                    if event.actual_children_budget is not None:
                        sport_stats[event.sport]['fact_children'] += event.actual_children_budget
                    else:
                        # –ï—Å–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ, –Ω–æ —Ñ–∞–∫—Ç –Ω–µ —É–∫–∞–∑–∞–Ω - –±–µ—Ä—ë–º –ø–ª–∞–Ω
                        sport_stats[event.sport]['fact_children'] += event.children_budget
                    
                    if event.actual_trainers_budget is not None:
                        sport_stats[event.sport]['fact_trainers'] += event.actual_trainers_budget
                    else:
                        # –ï—Å–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ, –Ω–æ —Ñ–∞–∫—Ç –Ω–µ —É–∫–∞–∑–∞–Ω - –±–µ—Ä—ë–º –ø–ª–∞–Ω
                        sport_stats[event.sport]['fact_trainers'] += event.trainers_budget
                # –î–ª—è –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç = 0 (–Ω–µ —Ç—Ä–∞—Ç–∏–ª–∏)
            # –î–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö, –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω–Ω—ã—Ö - —Ñ–∞–∫—Ç = 0
        
        for sport in sorted(sport_stats.keys()):
            stats = sport_stats[sport]
            plan_text += f"\n{sport}:\n"
            plan_text += f"  –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {stats['count']}\n"
            plan_text += f"  –ë—é–¥–∂–µ—Ç –¥–µ—Ç–µ–π:    –ø–ª–∞–Ω {format_number(stats['plan_children'])} ‚Üí —Ñ–∞–∫—Ç {format_number(stats['fact_children'])}"
            
            # –≠–∫–æ–Ω–æ–º–∏—è/–ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö
            if stats['plan_children_completed'] > 0:
                diff_children = stats['plan_children_completed'] - stats['fact_children']
                if diff_children > 0:
                    plan_text += f" (—ç–∫–æ–Ω–æ–º–∏—è: {format_number(diff_children)})\n"
                elif diff_children < 0:
                    plan_text += f" (–ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥: {format_number(abs(diff_children))})\n"
                else:
                    plan_text += " (–ø–æ –ø–ª–∞–Ω—É)\n"
            else:
                plan_text += " (–Ω/–¥)\n"
            
            plan_text += f"  –ë—é–¥–∂–µ—Ç —Ç—Ä–µ–Ω–µ—Ä–æ–≤: –ø–ª–∞–Ω {format_number(stats['plan_trainers'])} ‚Üí —Ñ–∞–∫—Ç {format_number(stats['fact_trainers'])}"
            
            # –≠–∫–æ–Ω–æ–º–∏—è/–ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö
            if stats['plan_trainers_completed'] > 0:
                diff_trainers = stats['plan_trainers_completed'] - stats['fact_trainers']
                if diff_trainers > 0:
                    plan_text += f" (—ç–∫–æ–Ω–æ–º–∏—è: {format_number(diff_trainers)})\n"
                elif diff_trainers < 0:
                    plan_text += f" (–ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥: {format_number(abs(diff_trainers))})\n"
                else:
                    plan_text += " (–ø–æ –ø–ª–∞–Ω—É)\n"
            else:
                plan_text += " (–Ω/–¥)\n"
        
        plan_text += "\n" + "=" * 90 + "\n"
        
        # –ò—Ç–æ–≥–∏ –ø–æ –±—é–¥–∂–µ—Ç–∞–º (—Ä–∞–∑–¥–µ–ª—å–Ω–æ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è)
        plan_text += "\n–ò–¢–û–ì–ò –ü–û –ë–Æ–î–ñ–ï–¢–ê–ú:\n"
        plan_text += "=" * 90 + "\n"
        
        # –°—á–∏—Ç–∞–µ–º –ø–ª–∞–Ω–æ–≤—ã–µ –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å—É–º–º—ã
        # –ü–ª–∞–Ω –≤–∫–ª—é—á–∞–µ—Ç –í–°–ï –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–¥–∞–∂–µ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã–µ - –æ–Ω–∏ –±—ã–ª–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã)
        plan_children_total = sum(e.children_budget for e in events)
        plan_trainers_total = sum(e.trainers_budget for e in events)
        
        # –ü–ª–∞–Ω –¥–ª—è –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö (–¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —ç–∫–æ–Ω–æ–º–∏–∏/–ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥–∞)
        plan_children_completed = sum(e.children_budget for e in events if e.status in ["–ü—Ä–æ–≤–µ–¥–µ–Ω–æ", "–û—Ç–º–µ–Ω–µ–Ω–æ"])
        plan_trainers_completed = sum(e.trainers_budget for e in events if e.status in ["–ü—Ä–æ–≤–µ–¥–µ–Ω–æ", "–û—Ç–º–µ–Ω–µ–Ω–æ"])
        
        # –§–∞–∫—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        fact_children_total = sum(
            e.actual_children_budget if e.actual_children_budget is not None else e.children_budget
            for e in events if e.status == "–ü—Ä–æ–≤–µ–¥–µ–Ω–æ"
        )
        fact_trainers_total = sum(
            e.actual_trainers_budget if e.actual_trainers_budget is not None else e.trainers_budget
            for e in events if e.status == "–ü—Ä–æ–≤–µ–¥–µ–Ω–æ"
        )
        
        # –ë—é–¥–∂–µ—Ç –Ω–∞ –¥–µ—Ç–µ–π (–ü—Ä–æ—Ñ—Å–æ—é–∑)
        plan_text += "\n1. –ë–Æ–î–ñ–ï–¢ –ù–ê –î–ï–¢–ï–ô\n"
        plan_text += "   –ò—Å—Ç–æ—á–Ω–∏–∫ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è: –ü–ü–û \"–ì–∞–∑–ø—Ä–æ–º –¥–æ–±—ã—á–∞ –Ø–º–±—É—Ä–≥ –ø—Ä–æ—Ñ—Å–æ—é–∑\"\n"
        plan_text += "-" * 90 + "\n"
        plan_text += f"  –ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {format_rubles(plan_children_total)}\n"
        plan_text += f"  –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {format_rubles(fact_children_total)}\n"
        
        # –≠–∫–æ–Ω–æ–º–∏—è/–ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö
        if plan_children_completed > 0:
            diff_children_total = plan_children_completed - fact_children_total
            if diff_children_total > 0:
                plan_text += f"  ‚úì –≠–ö–û–ù–û–ú–ò–Ø: {format_rubles(diff_children_total)} ({(diff_children_total/plan_children_completed*100):.1f}%)\n"
            elif diff_children_total < 0:
                plan_text += f"  ‚ö† –ü–ï–†–ï–†–ê–°–•–û–î: {format_rubles(abs(diff_children_total))} ({(abs(diff_children_total)/plan_children_completed*100):.1f}%)\n"
            else:
                plan_text += f"  ‚úì –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ –ø–ª–∞–Ω—É (100%)\n"
        else:
            plan_text += f"  (–Ω/–¥ - –Ω–µ—Ç –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö)\n"
        
        plan_text += "\n"
        
        # –ë—é–¥–∂–µ—Ç –Ω–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤ (–£–≠–í–ü)
        plan_text += "2. –ë–Æ–î–ñ–ï–¢ –ù–ê –¢–†–ï–ù–ï–†–û–í\n"
        plan_text += "   –ò—Å—Ç–æ—á–Ω–∏–∫ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è: —Ñ. –£–≠–í–ü –û–û–û \"–ì–∞–∑–ø—Ä–æ–º –¥–æ–±—ã—á–∞ –Ø–º–±—É—Ä–≥\"\n"
        plan_text += "-" * 90 + "\n"
        plan_text += f"  –ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {format_rubles(plan_trainers_total)}\n"
        plan_text += f"  –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {format_rubles(fact_trainers_total)}\n"
        
        # –≠–∫–æ–Ω–æ–º–∏—è/–ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö
        if plan_trainers_completed > 0:
            diff_trainers_total = plan_trainers_completed - fact_trainers_total
            if diff_trainers_total > 0:
                plan_text += f"  ‚úì –≠–ö–û–ù–û–ú–ò–Ø: {format_rubles(diff_trainers_total)} ({(diff_trainers_total/plan_trainers_completed*100):.1f}%)\n"
            elif diff_trainers_total < 0:
                plan_text += f"  ‚ö† –ü–ï–†–ï–†–ê–°–•–û–î: {format_rubles(abs(diff_trainers_total))} ({(abs(diff_trainers_total)/plan_trainers_completed*100):.1f}%)\n"
            else:
                plan_text += f"  ‚úì –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ –ø–ª–∞–Ω—É (100%)\n"
        else:
            plan_text += f"  (–Ω/–¥ - –Ω–µ—Ç –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö)\n"
        
        plan_text += "\n" + "=" * 90 + "\n"
        plan_text += "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ë—é–¥–∂–µ—Ç—ã —Ñ–∏–Ω–∞–Ω—Å–∏—Ä—É—é—Ç—Å—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏ –Ω–µ —Å—É–º–º–∏—Ä—É—é—Ç—Å—è.\n"
        plan_text += "=" * 90 + "\n"
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–ª–∞–Ω
        self.text_area.insert('1.0', plan_text)
    
    def _load_financial_report(self):
        """–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç - —Ç–æ–ª—å–∫–æ –±—é–¥–∂–µ—Ç—ã –±–µ–∑ –¥–µ—Ç–∞–ª–µ–π –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
        events_data = self.db.get_events_by_year(self.year)
        
        if not events_data:
            self.text_area.insert('1.0', "–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–∞ —ç—Ç–æ—Ç –≥–æ–¥")
            return
        
        events = [Event.from_db_row(row) for row in events_data]
        
        report_text = ""
        report_text += "=" * 90 + "\n"
        report_text += f"–§–ò–ù–ê–ù–°–û–í–´–ô –û–¢–ß–Å–¢ –ù–ê {self.year} –ì–û–î\n"
        report_text += "=" * 90 + "\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∏–¥–∞–º —Å–ø–æ—Ä—Ç–∞ (—Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–Ω—Å—ã)
        report_text += "–§–ò–ù–ê–ù–°–ò–†–û–í–ê–ù–ò–ï –ü–û –í–ò–î–ê–ú –°–ü–û–†–¢–ê:\n"
        report_text += "=" * 90 + "\n"
        
        sport_stats = {}
        for event in events:
            if event.sport not in sport_stats:
                sport_stats[event.sport] = {
                    'count': 0,
                    'plan_children': 0,
                    'fact_children': 0,
                    'plan_trainers': 0,
                    'fact_trainers': 0,
                    'plan_children_completed': 0,  # –ü–ª–∞–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö
                    'plan_trainers_completed': 0   # –ü–ª–∞–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö
                }
            
            sport_stats[event.sport]['count'] += 1
            sport_stats[event.sport]['plan_children'] += event.children_budget
            sport_stats[event.sport]['plan_trainers'] += event.trainers_budget
            
            # –§–∞–∫—Ç –∏ –ø–ª–∞–Ω –¥–ª—è –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö (–¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —ç–∫–æ–Ω–æ–º–∏–∏/–ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥–∞)
            if event.status in ["–ü—Ä–æ–≤–µ–¥–µ–Ω–æ", "–û—Ç–º–µ–Ω–µ–Ω–æ"]:
                sport_stats[event.sport]['plan_children_completed'] += event.children_budget
                sport_stats[event.sport]['plan_trainers_completed'] += event.trainers_budget
                
                if event.status == "–ü—Ä–æ–≤–µ–¥–µ–Ω–æ":
                    if event.actual_children_budget is not None:
                        sport_stats[event.sport]['fact_children'] += event.actual_children_budget
                    else:
                        # –ï—Å–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ, –Ω–æ —Ñ–∞–∫—Ç –Ω–µ —É–∫–∞–∑–∞–Ω - –±–µ—Ä—ë–º –ø–ª–∞–Ω
                        sport_stats[event.sport]['fact_children'] += event.children_budget
                    
                    if event.actual_trainers_budget is not None:
                        sport_stats[event.sport]['fact_trainers'] += event.actual_trainers_budget
                    else:
                        # –ï—Å–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ, –Ω–æ —Ñ–∞–∫—Ç –Ω–µ —É–∫–∞–∑–∞–Ω - –±–µ—Ä—ë–º –ø–ª–∞–Ω
                        sport_stats[event.sport]['fact_trainers'] += event.trainers_budget
                # –î–ª—è –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç = 0 (–Ω–µ —Ç—Ä–∞—Ç–∏–ª–∏)
            # –î–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö, –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω–Ω—ã—Ö - —Ñ–∞–∫—Ç = 0
        
        for sport in sorted(sport_stats.keys()):
            stats = sport_stats[sport]
            report_text += f"\n{sport} ({stats['count']} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π):\n"
            report_text += f"  –ë—é–¥–∂–µ—Ç –¥–µ—Ç–µ–π:    {stats['plan_children']:>12.2f} ‚Üí {stats['fact_children']:>12.2f}"
            
            # –≠–∫–æ–Ω–æ–º–∏—è/–ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö
            if stats['plan_children_completed'] > 0:
                diff_c = stats['plan_children_completed'] - stats['fact_children']
                if diff_c > 0:
                    report_text += f"  (—ç–∫–æ–Ω–æ–º–∏—è: {diff_c:.2f})\n"
                elif diff_c < 0:
                    report_text += f"  (–ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥: {abs(diff_c):.2f})\n"
                else:
                    report_text += "\n"
            else:
                report_text += "  (–Ω/–¥)\n"
            
            report_text += f"  –ë—é–¥–∂–µ—Ç —Ç—Ä–µ–Ω–µ—Ä–æ–≤: {stats['plan_trainers']:>12.2f} ‚Üí {stats['fact_trainers']:>12.2f}"
            
            # –≠–∫–æ–Ω–æ–º–∏—è/–ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö
            if stats['plan_trainers_completed'] > 0:
                diff_t = stats['plan_trainers_completed'] - stats['fact_trainers']
                if diff_t > 0:
                    report_text += f"  (—ç–∫–æ–Ω–æ–º–∏—è: {diff_t:.2f})\n"
                elif diff_t < 0:
                    report_text += f"  (–ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥: {abs(diff_t):.2f})\n"
                else:
                    report_text += "\n"
            else:
                report_text += "  (–Ω/–¥)\n"
        
        # –û–±—â–∏–µ –∏—Ç–æ–≥–∏
        report_text += "\n" + "=" * 90 + "\n"
        report_text += "–ò–¢–û–ì–ò –ü–û –ë–Æ–î–ñ–ï–¢–ê–ú:\n"
        report_text += "=" * 90 + "\n"
        
        plan_children_total = sum(e.children_budget for e in events)
        plan_trainers_total = sum(e.trainers_budget for e in events)
        
        # –ü–ª–∞–Ω –¥–ª—è –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö (–¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —ç–∫–æ–Ω–æ–º–∏–∏/–ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥–∞)
        plan_children_completed = sum(e.children_budget for e in events if e.status in ["–ü—Ä–æ–≤–µ–¥–µ–Ω–æ", "–û—Ç–º–µ–Ω–µ–Ω–æ"])
        plan_trainers_completed = sum(e.trainers_budget for e in events if e.status in ["–ü—Ä–æ–≤–µ–¥–µ–Ω–æ", "–û—Ç–º–µ–Ω–µ–Ω–æ"])
        
        # –§–∞–∫—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö
        fact_children_total = sum(
            e.actual_children_budget if e.actual_children_budget is not None else e.children_budget
            for e in events if e.status == "–ü—Ä–æ–≤–µ–¥–µ–Ω–æ"
        )
        fact_trainers_total = sum(
            e.actual_trainers_budget if e.actual_trainers_budget is not None else e.trainers_budget
            for e in events if e.status == "–ü—Ä–æ–≤–µ–¥–µ–Ω–æ"
        )
        
        report_text += "\n1. –ë–Æ–î–ñ–ï–¢ –ù–ê –î–ï–¢–ï–ô\n"
        report_text += "   –ò—Å—Ç–æ—á–Ω–∏–∫: –ü–ü–û \"–ì–∞–∑–ø—Ä–æ–º –¥–æ–±—ã—á–∞ –Ø–º–±—É—Ä–≥ –ø—Ä–æ—Ñ—Å–æ—é–∑\"\n"
        report_text += "-" * 90 + "\n"
        report_text += f"  –ü–ª–∞–Ω:  {format_rubles(plan_children_total):>25}\n"
        report_text += f"  –§–∞–∫—Ç:  {format_rubles(fact_children_total):>25}\n"
        
        # –≠–∫–æ–Ω–æ–º–∏—è/–ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö
        if plan_children_completed > 0:
            diff_children = plan_children_completed - fact_children_total
            if diff_children > 0:
                report_text += f"  ‚úì –≠–ö–û–ù–û–ú–ò–Ø: {format_rubles(diff_children)} ({(diff_children/plan_children_completed*100):.1f}%)\n"
            elif diff_children < 0:
                report_text += f"  ‚ö† –ü–ï–†–ï–†–ê–°–•–û–î: {format_rubles(abs(diff_children))} ({(abs(diff_children)/plan_children_completed*100):.1f}%)\n"
            else:
                report_text += f"  ‚úì –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ –ø–ª–∞–Ω—É\n"
        else:
            report_text += f"  (–Ω/–¥ - –Ω–µ—Ç –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö)\n"
        
        report_text += "\n2. –ë–Æ–î–ñ–ï–¢ –ù–ê –¢–†–ï–ù–ï–†–û–í\n"
        report_text += "   –ò—Å—Ç–æ—á–Ω–∏–∫: —Ñ. –£–≠–í–ü –û–û–û \"–ì–∞–∑–ø—Ä–æ–º –¥–æ–±—ã—á–∞ –Ø–º–±—É—Ä–≥\"\n"
        report_text += "-" * 90 + "\n"
        report_text += f"  –ü–ª–∞–Ω:  {format_rubles(plan_trainers_total):>25}\n"
        report_text += f"  –§–∞–∫—Ç:  {format_rubles(fact_trainers_total):>25}\n"
        
        # –≠–∫–æ–Ω–æ–º–∏—è/–ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö
        if plan_trainers_completed > 0:
            diff_trainers = plan_trainers_completed - fact_trainers_total
            if diff_trainers > 0:
                report_text += f"  ‚úì –≠–ö–û–ù–û–ú–ò–Ø: {format_rubles(diff_trainers)} ({(diff_trainers/plan_trainers_completed*100):.1f}%)\n"
            elif diff_trainers < 0:
                report_text += f"  ‚ö† –ü–ï–†–ï–†–ê–°–•–û–î: {format_rubles(abs(diff_trainers))} ({(abs(diff_trainers)/plan_trainers_completed*100):.1f}%)\n"
            else:
                report_text += f"  ‚úì –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ –ø–ª–∞–Ω—É\n"
        else:
            report_text += f"  (–Ω/–¥ - –Ω–µ—Ç –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö)\n"
        
        report_text += "\n" + "=" * 90 + "\n"
        
        self.text_area.insert('1.0', report_text)
    
    def _load_sports_report(self):
        """–û—Ç—á—ë—Ç –ø–æ –≤–∏–¥–∞–º —Å–ø–æ—Ä—Ç–∞"""
        events_data = self.db.get_events_by_year(self.year)
        
        if not events_data:
            self.text_area.insert('1.0', "–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–∞ —ç—Ç–æ—Ç –≥–æ–¥")
            return
        
        events = [Event.from_db_row(row) for row in events_data]
        
        report_text = ""
        report_text += "=" * 90 + "\n"
        report_text += f"–û–¢–ß–Å–¢ –ü–û –í–ò–î–ê–ú –°–ü–û–†–¢–ê - {self.year} –ì–û–î\n"
        report_text += "=" * 90 + "\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤–∏–¥–∞–º —Å–ø–æ—Ä—Ç–∞
        sports_dict = {}
        for event in events:
            if event.sport not in sports_dict:
                sports_dict[event.sport] = []
            sports_dict[event.sport].append(event)
        
        for sport in sorted(sports_dict.keys()):
            sport_events = sports_dict[sport]
            
            report_text += "=" * 90 + "\n"
            report_text += f"{sport.upper()} ({len(sport_events)} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π)\n"
            report_text += "=" * 90 + "\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            conducted = sum(1 for e in sport_events if e.status == "–ü—Ä–æ–≤–µ–¥–µ–Ω–æ")
            cancelled = sum(1 for e in sport_events if e.status == "–û—Ç–º–µ–Ω–µ–Ω–æ")
            postponed = sum(1 for e in sport_events if e.status == "–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ")
            planned = sum(1 for e in sport_events if e.status == "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ")
            
            report_text += f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            report_text += f"  –ü—Ä–æ–≤–µ–¥–µ–Ω–æ: {conducted}\n"
            if cancelled > 0:
                report_text += f"  –û—Ç–º–µ–Ω–µ–Ω–æ: {cancelled}\n"
            if postponed > 0:
                report_text += f"  –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: {postponed}\n"
            report_text += f"  –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {planned}\n\n"
            
            # –°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
            report_text += "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n"
            report_text += "-" * 90 + "\n"
            
            for i, event in enumerate(sport_events, 1):
                status_mark = {
                    "–ü—Ä–æ–≤–µ–¥–µ–Ω–æ": "‚úì",
                    "–û—Ç–º–µ–Ω–µ–Ω–æ": "‚úó",
                    "–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ": "‚Üí",
                    "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ": "‚óã"
                }.get(event.status, "‚óã")
                
                report_text += f"{i}. [{status_mark}] {event.name}\n"
                report_text += f"   {event.event_type} | {event.month} | {event.location}\n"
                
                if event.actual_start_date:
                    report_text += f"   –î–∞—Ç—ã: {event.actual_start_date}"
                    if event.actual_end_date and event.actual_end_date != event.actual_start_date:
                        report_text += f" - {event.actual_end_date}"
                    report_text += "\n"
                
                if event.cancellation_reason:
                    report_text += f"   –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã: {event.cancellation_reason}\n"
                
                report_text += "\n"
            
            # –§–∏–Ω–∞–Ω—Å—ã –ø–æ —Å–ø–æ—Ä—Ç—É
            plan_c = sum(e.children_budget for e in sport_events)
            plan_t = sum(e.trainers_budget for e in sport_events)
            
            # –§–∞–∫—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
            fact_c = sum(
                e.actual_children_budget if e.actual_children_budget is not None else e.children_budget
                for e in sport_events if e.status == "–ü—Ä–æ–≤–µ–¥–µ–Ω–æ"
            )
            fact_t = sum(
                e.actual_trainers_budget if e.actual_trainers_budget is not None else e.trainers_budget
                for e in sport_events if e.status == "–ü—Ä–æ–≤–µ–¥–µ–Ω–æ"
            )
            
            report_text += "–§–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"
            report_text += f"  –î–µ—Ç–∏:    –ø–ª–∞–Ω {plan_c:.2f} ‚Üí —Ñ–∞–∫—Ç {fact_c:.2f}\n"
            report_text += f"  –¢—Ä–µ–Ω–µ—Ä—ã: –ø–ª–∞–Ω {plan_t:.2f} ‚Üí —Ñ–∞–∫—Ç {fact_t:.2f}\n"
            report_text += "\n\n"
        
        self.text_area.insert('1.0', report_text)
    
    def _load_status_report(self):
        """–û—Ç—á—ë—Ç –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
        events_data = self.db.get_events_by_year(self.year)
        
        if not events_data:
            self.text_area.insert('1.0', "–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–∞ —ç—Ç–æ—Ç –≥–æ–¥")
            return
        
        events = [Event.from_db_row(row) for row in events_data]
        
        report_text = ""
        report_text += "=" * 90 + "\n"
        report_text += f"–û–¢–ß–Å–¢ –ü–û –°–¢–ê–¢–£–°–ê–ú –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ô - {self.year} –ì–û–î\n"
        report_text += "=" * 90 + "\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        status_dict = {}
        for event in events:
            status = event.status or "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ"
            if status not in status_dict:
                status_dict[status] = []
            status_dict[status].append(event)
        
        # –ü–æ—Ä—è–¥–æ–∫ —Å—Ç–∞—Ç—É—Å–æ–≤
        status_order = ["–ü—Ä–æ–≤–µ–¥–µ–Ω–æ", "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ", "–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ", "–û—Ç–º–µ–Ω–µ–Ω–æ"]
        
        for status in status_order:
            if status not in status_dict:
                continue
            
            status_events = status_dict[status]
            
            report_text += "=" * 90 + "\n"
            report_text += f"{status.upper()} ({len(status_events)} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π)\n"
            report_text += "=" * 90 + "\n\n"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–µ—Å—è—Ü–∞–º
            by_month = {}
            for event in status_events:
                if event.month not in by_month:
                    by_month[event.month] = []
                by_month[event.month].append(event)
            
            for month in MONTHS:
                if month not in by_month:
                    continue
                
                month_events = by_month[month]
                report_text += f"{month}:\n"
                
                for event in month_events:
                    report_text += f"  ‚Ä¢ {event.name}\n"
                    report_text += f"    {event.sport} | {event.event_type} | {event.location}\n"
                    
                    if status == "–ü—Ä–æ–≤–µ–¥–µ–Ω–æ" and event.actual_start_date:
                        report_text += f"    –î–∞—Ç—ã: {event.actual_start_date}"
                        if event.actual_end_date and event.actual_end_date != event.actual_start_date:
                            report_text += f" - {event.actual_end_date}"
                        report_text += "\n"
                    
                    if status == "–û—Ç–º–µ–Ω–µ–Ω–æ" and event.cancellation_reason:
                        report_text += f"    –ü—Ä–∏—á–∏–Ω–∞: {event.cancellation_reason}\n"
                    
                    if status == "–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ" and event.postponement_reason:
                        report_text += f"    –ü—Ä–∏—á–∏–Ω–∞: {event.postponement_reason}\n"
                    
                    report_text += "\n"
            
            report_text += "\n"
        
        self.text_area.insert('1.0', report_text)
    
    def _load_summary_report(self):
        """–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞"""
        events_data = self.db.get_events_by_year(self.year)
        
        if not events_data:
            self.text_area.insert('1.0', "–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–∞ —ç—Ç–æ—Ç –≥–æ–¥")
            return
        
        events = [Event.from_db_row(row) for row in events_data]
        
        report_text = ""
        report_text += "=" * 90 + "\n"
        report_text += f"–ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê - {self.year} –ì–û–î\n"
        report_text += "=" * 90 + "\n\n"
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total = len(events)
        internal = sum(1 for e in events if e.event_type == "–í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ")
        external = sum(1 for e in events if e.event_type == "–í—ã–µ–∑–¥–Ω–æ–µ")
        
        conducted = sum(1 for e in events if e.status == "–ü—Ä–æ–≤–µ–¥–µ–Ω–æ")
        cancelled = sum(1 for e in events if e.status == "–û—Ç–º–µ–Ω–µ–Ω–æ")
        postponed = sum(1 for e in events if e.status == "–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ")
        planned = sum(1 for e in events if e.status == "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ")
        
        report_text += "–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n"
        report_text += "-" * 90 + "\n"
        report_text += f"–í—Å–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {total}\n"
        report_text += f"  –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö: {internal} ({internal/total*100:.1f}%)\n"
        report_text += f"  –í—ã–µ–∑–¥–Ω—ã—Ö: {external} ({external/total*100:.1f}%)\n\n"
        
        report_text += "–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:\n"
        report_text += f"  –ü—Ä–æ–≤–µ–¥–µ–Ω–æ: {conducted} ({conducted/total*100:.1f}%)\n"
        if cancelled > 0:
            report_text += f"  –û—Ç–º–µ–Ω–µ–Ω–æ: {cancelled} ({cancelled/total*100:.1f}%)\n"
        if postponed > 0:
            report_text += f"  –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: {postponed} ({postponed/total*100:.1f}%)\n"
        report_text += f"  –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {planned} ({planned/total*100:.1f}%)\n\n"
        
        # –ü–æ –≤–∏–¥–∞–º —Å–ø–æ—Ä—Ç–∞
        report_text += "–ü–û –í–ò–î–ê–ú –°–ü–û–†–¢–ê:\n"
        report_text += "-" * 90 + "\n"
        
        sport_counts = {}
        for event in events:
            sport_counts[event.sport] = sport_counts.get(event.sport, 0) + 1
        
        for sport in sorted(sport_counts.keys()):
            count = sport_counts[sport]
            report_text += f"  {sport:.<30} {count:>3} ({count/total*100:>5.1f}%)\n"
        
        # –§–∏–Ω–∞–Ω—Å—ã
        report_text += "\n" + "=" * 90 + "\n"
        report_text += "–§–ò–ù–ê–ù–°–û–í–ê–Ø –°–í–û–î–ö–ê:\n"
        report_text += "=" * 90 + "\n\n"
        
        plan_children = sum(e.children_budget for e in events)
        plan_trainers = sum(e.trainers_budget for e in events)
        
        # –ü–ª–∞–Ω –¥–ª—è –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö (–¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —ç–∫–æ–Ω–æ–º–∏–∏/–ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥–∞)
        plan_children_completed = sum(e.children_budget for e in events if e.status in ["–ü—Ä–æ–≤–µ–¥–µ–Ω–æ", "–û—Ç–º–µ–Ω–µ–Ω–æ"])
        plan_trainers_completed = sum(e.trainers_budget for e in events if e.status in ["–ü—Ä–æ–≤–µ–¥–µ–Ω–æ", "–û—Ç–º–µ–Ω–µ–Ω–æ"])
        
        # –§–∞–∫—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö
        fact_children = sum(
            e.actual_children_budget if e.actual_children_budget is not None else e.children_budget
            for e in events if e.status == "–ü—Ä–æ–≤–µ–¥–µ–Ω–æ"
        )
        fact_trainers = sum(
            e.actual_trainers_budget if e.actual_trainers_budget is not None else e.trainers_budget
            for e in events if e.status == "–ü—Ä–æ–≤–µ–¥–µ–Ω–æ"
        )
        
        report_text += "–ë—é–¥–∂–µ—Ç –Ω–∞ –¥–µ—Ç–µ–π (–ü–ü–û \"–ì–∞–∑–ø—Ä–æ–º –¥–æ–±—ã—á–∞ –Ø–º–±—É—Ä–≥ –ø—Ä–æ—Ñ—Å–æ—é–∑\"):\n"
        report_text += f"  –ü–ª–∞–Ω:  {format_rubles(plan_children):>25}\n"
        report_text += f"  –§–∞–∫—Ç:  {format_rubles(fact_children):>25}\n"
        
        # –≠–∫–æ–Ω–æ–º–∏—è/–ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö
        if plan_children_completed > 0:
            diff_c = plan_children_completed - fact_children
            if diff_c > 0:
                report_text += f"  ‚úì –≠–∫–æ–Ω–æ–º–∏—è:   {format_rubles(diff_c)} ({diff_c/plan_children_completed*100:>5.1f}%)\n"
            elif diff_c < 0:
                report_text += f"  ‚ö† –ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥: {format_rubles(abs(diff_c))} ({abs(diff_c)/plan_children_completed*100:>5.1f}%)\n"
            else:
                report_text += f"  ‚úì –ü–æ –ø–ª–∞–Ω—É\n"
        else:
            report_text += f"  (–Ω/–¥ - –Ω–µ—Ç –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö)\n"
        
        report_text += "\n–ë—é–¥–∂–µ—Ç –Ω–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤ (—Ñ. –£–≠–í–ü –û–û–û \"–ì–∞–∑–ø—Ä–æ–º –¥–æ–±—ã—á–∞ –Ø–º–±—É—Ä–≥\"):\n"
        report_text += f"  –ü–ª–∞–Ω:  {format_rubles(plan_trainers):>25}\n"
        report_text += f"  –§–∞–∫—Ç:  {format_rubles(fact_trainers):>25}\n"
        
        # –≠–∫–æ–Ω–æ–º–∏—è/–ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö
        if plan_trainers_completed > 0:
            diff_t = plan_trainers_completed - fact_trainers
            if diff_t > 0:
                report_text += f"  ‚úì –≠–∫–æ–Ω–æ–º–∏—è:   {format_rubles(diff_t)} ({diff_t/plan_trainers_completed*100:>5.1f}%)\n"
            elif diff_t < 0:
                report_text += f"  ‚ö† –ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥: {format_rubles(abs(diff_t))} ({abs(diff_t)/plan_trainers_completed*100:>5.1f}%)\n"
            else:
                report_text += f"  ‚úì –ü–æ –ø–ª–∞–Ω—É\n"
        else:
            report_text += f"  (–Ω/–¥ - –Ω–µ—Ç –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö)\n"
        
        report_text += "\n" + "=" * 90 + "\n"
        
        self.text_area.insert('1.0', report_text)
    
    def _load_by_type_report(self):
        """–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç –ø–æ —Ç–∏–ø–∞–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π (–≤—ã–µ–∑–¥–Ω—ã–µ/–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞"""
        events_data = self.db.get_events_by_year(self.year)
        
        if not events_data:
            self.text_area.insert('1.0', "–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–∞ —ç—Ç–æ—Ç –≥–æ–¥")
            return
        
        events = [Event.from_db_row(row) for row in events_data]
        
        report_text = ""
        report_text += "=" * 90 + "\n"
        report_text += f"–§–ò–ù–ê–ù–°–û–í–´–ô –û–¢–ß–Å–¢ –ü–û –¢–ò–ü–ê–ú –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ô - {self.year} –ì–û–î\n"
        report_text += "=" * 90 + "\n\n"
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–∏–¥–∞–º —Å–ø–æ—Ä—Ç–∞ –∏ —Ç–∏–ø–∞–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        sport_stats = {}
        
        for event in events:
            if event.sport not in sport_stats:
                sport_stats[event.sport] = {
                    '–í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ': {
                        'count': 0,
                        'plan_children': 0,
                        'fact_children': 0,
                        'plan_trainers': 0,
                        'fact_trainers': 0,
                        'plan_children_completed': 0,
                        'plan_trainers_completed': 0
                    },
                    '–í—ã–µ–∑–¥–Ω–æ–µ': {
                        'count': 0,
                        'plan_children': 0,
                        'fact_children': 0,
                        'plan_trainers': 0,
                        'fact_trainers': 0,
                        'plan_children_completed': 0,
                        'plan_trainers_completed': 0
                    }
                }
            
            event_type = event.event_type
            stats = sport_stats[event.sport][event_type]
            
            stats['count'] += 1
            stats['plan_children'] += event.children_budget
            stats['plan_trainers'] += event.trainers_budget
            
            # –§–∞–∫—Ç –∏ –ø–ª–∞–Ω –¥–ª—è –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö
            if event.status in ["–ü—Ä–æ–≤–µ–¥–µ–Ω–æ", "–û—Ç–º–µ–Ω–µ–Ω–æ"]:
                stats['plan_children_completed'] += event.children_budget
                stats['plan_trainers_completed'] += event.trainers_budget
                
                if event.status == "–ü—Ä–æ–≤–µ–¥–µ–Ω–æ":
                    if event.actual_children_budget is not None:
                        stats['fact_children'] += event.actual_children_budget
                    else:
                        stats['fact_children'] += event.children_budget
                    
                    if event.actual_trainers_budget is not None:
                        stats['fact_trainers'] += event.actual_trainers_budget
                    else:
                        stats['fact_trainers'] += event.trainers_budget
        
        # –í—ã–≤–æ–¥–∏–º –æ—Ç—á—ë—Ç –ø–æ –∫–∞–∂–¥–æ–º—É –≤–∏–¥—É —Å–ø–æ—Ä—Ç–∞
        for sport in sorted(sport_stats.keys()):
            report_text += f"{'=' * 90}\n"
            report_text += f"{sport.upper()}\n"
            report_text += f"{'=' * 90}\n\n"
            
            for event_type in ['–í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ', '–í—ã–µ–∑–¥–Ω–æ–µ']:
                stats = sport_stats[sport][event_type]
                
                if stats['count'] == 0:
                    continue
                
                report_text += f"  {event_type} ({stats['count']} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π)\n"
                report_text += f"  {'-' * 86}\n"
                
                # –ë—é–¥–∂–µ—Ç –Ω–∞ –¥–µ—Ç–µ–π
                report_text += f"  –ë—é–¥–∂–µ—Ç –Ω–∞ –¥–µ—Ç–µ–π:\n"
                report_text += f"    –ü–ª–∞–Ω: {format_rubles(stats['plan_children']):>30}\n"
                report_text += f"    –§–∞–∫—Ç: {format_rubles(stats['fact_children']):>30}\n"
                
                if stats['plan_children_completed'] > 0:
                    diff_c = stats['plan_children_completed'] - stats['fact_children']
                    if diff_c > 0:
                        report_text += f"    ‚úì –≠–∫–æ–Ω–æ–º–∏—è:   {format_rubles(diff_c):>30} ({diff_c/stats['plan_children_completed']*100:>5.1f}%)\n"
                    elif diff_c < 0:
                        report_text += f"    ‚ö† –ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥: {format_rubles(abs(diff_c)):>30} ({abs(diff_c)/stats['plan_children_completed']*100:>5.1f}%)\n"
                    else:
                        report_text += f"    ‚úì –ü–æ –ø–ª–∞–Ω—É\n"
                else:
                    report_text += f"    (–Ω/–¥ - –Ω–µ—Ç –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö)\n"
                
                # –ë—é–¥–∂–µ—Ç –Ω–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤
                report_text += f"\n  –ë—é–¥–∂–µ—Ç –Ω–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤:\n"
                report_text += f"    –ü–ª–∞–Ω: {format_rubles(stats['plan_trainers']):>30}\n"
                report_text += f"    –§–∞–∫—Ç: {format_rubles(stats['fact_trainers']):>30}\n"
                
                if stats['plan_trainers_completed'] > 0:
                    diff_t = stats['plan_trainers_completed'] - stats['fact_trainers']
                    if diff_t > 0:
                        report_text += f"    ‚úì –≠–∫–æ–Ω–æ–º–∏—è:   {format_rubles(diff_t):>30} ({diff_t/stats['plan_trainers_completed']*100:>5.1f}%)\n"
                    elif diff_t < 0:
                        report_text += f"    ‚ö† –ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥: {format_rubles(abs(diff_t)):>30} ({abs(diff_t)/stats['plan_trainers_completed']*100:>5.1f}%)\n"
                    else:
                        report_text += f"    ‚úì –ü–æ –ø–ª–∞–Ω—É\n"
                else:
                    report_text += f"    (–Ω/–¥ - –Ω–µ—Ç –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö)\n"
                
                report_text += "\n"
            
            report_text += "\n"
        
        # –û–±—â–∏–µ –∏—Ç–æ–≥–∏ –ø–æ —Ç–∏–ø–∞–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        report_text += "=" * 90 + "\n"
        report_text += "–û–ë–©–ò–ï –ò–¢–û–ì–ò –ü–û –¢–ò–ü–ê–ú –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ô\n"
        report_text += "=" * 90 + "\n\n"
        
        # –°—É–º–º–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
        type_totals = {
            '–í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ': {
                'count': 0,
                'plan_children': 0,
                'fact_children': 0,
                'plan_trainers': 0,
                'fact_trainers': 0,
                'plan_children_completed': 0,
                'plan_trainers_completed': 0
            },
            '–í—ã–µ–∑–¥–Ω–æ–µ': {
                'count': 0,
                'plan_children': 0,
                'fact_children': 0,
                'plan_trainers': 0,
                'fact_trainers': 0,
                'plan_children_completed': 0,
                'plan_trainers_completed': 0
            }
        }
        
        for sport in sport_stats:
            for event_type in ['–í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ', '–í—ã–µ–∑–¥–Ω–æ–µ']:
                stats = sport_stats[sport][event_type]
                type_totals[event_type]['count'] += stats['count']
                type_totals[event_type]['plan_children'] += stats['plan_children']
                type_totals[event_type]['fact_children'] += stats['fact_children']
                type_totals[event_type]['plan_trainers'] += stats['plan_trainers']
                type_totals[event_type]['fact_trainers'] += stats['fact_trainers']
                type_totals[event_type]['plan_children_completed'] += stats['plan_children_completed']
                type_totals[event_type]['plan_trainers_completed'] += stats['plan_trainers_completed']
        
        for event_type in ['–í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ', '–í—ã–µ–∑–¥–Ω–æ–µ']:
            totals = type_totals[event_type]
            
            if totals['count'] == 0:
                continue
            
            report_text += f"{event_type.upper()} –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø ({totals['count']} —à—Ç.)\n"
            report_text += f"{'-' * 90}\n\n"
            
            # –ë—é–¥–∂–µ—Ç –Ω–∞ –¥–µ—Ç–µ–π
            report_text += "–ë—é–¥–∂–µ—Ç –Ω–∞ –¥–µ—Ç–µ–π (–ü–ü–û \"–ì–∞–∑–ø—Ä–æ–º –¥–æ–±—ã—á–∞ –Ø–º–±—É—Ä–≥ –ø—Ä–æ—Ñ—Å–æ—é–∑\"):\n"
            report_text += f"  –ü–ª–∞–Ω:  {format_rubles(totals['plan_children']):>30}\n"
            report_text += f"  –§–∞–∫—Ç:  {format_rubles(totals['fact_children']):>30}\n"
            
            if totals['plan_children_completed'] > 0:
                diff_c = totals['plan_children_completed'] - totals['fact_children']
                if diff_c > 0:
                    report_text += f"  ‚úì –≠–ö–û–ù–û–ú–ò–Ø:   {format_rubles(diff_c):>30} ({diff_c/totals['plan_children_completed']*100:>5.1f}%)\n"
                elif diff_c < 0:
                    report_text += f"  ‚ö† –ü–ï–†–ï–†–ê–°–•–û–î: {format_rubles(abs(diff_c)):>30} ({abs(diff_c)/totals['plan_children_completed']*100:>5.1f}%)\n"
                else:
                    report_text += f"  ‚úì –ü–û –ü–õ–ê–ù–£\n"
            else:
                report_text += f"  (–Ω/–¥ - –Ω–µ—Ç –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö)\n"
            
            # –ë—é–¥–∂–µ—Ç –Ω–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤
            report_text += f"\n–ë—é–¥–∂–µ—Ç –Ω–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤ (—Ñ. –£–≠–í–ü –û–û–û \"–ì–∞–∑–ø—Ä–æ–º –¥–æ–±—ã—á–∞ –Ø–º–±—É—Ä–≥\"):\n"
            report_text += f"  –ü–ª–∞–Ω:  {format_rubles(totals['plan_trainers']):>30}\n"
            report_text += f"  –§–∞–∫—Ç:  {format_rubles(totals['fact_trainers']):>30}\n"
            
            if totals['plan_trainers_completed'] > 0:
                diff_t = totals['plan_trainers_completed'] - totals['fact_trainers']
                if diff_t > 0:
                    report_text += f"  ‚úì –≠–ö–û–ù–û–ú–ò–Ø:   {format_rubles(diff_t):>30} ({diff_t/totals['plan_trainers_completed']*100:>5.1f}%)\n"
                elif diff_t < 0:
                    report_text += f"  ‚ö† –ü–ï–†–ï–†–ê–°–•–û–î: {format_rubles(abs(diff_t)):>30} ({abs(diff_t)/totals['plan_trainers_completed']*100:>5.1f}%)\n"
                else:
                    report_text += f"  ‚úì –ü–û –ü–õ–ê–ù–£\n"
            else:
                report_text += f"  (–Ω/–¥ - –Ω–µ—Ç –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö)\n"
            
            report_text += "\n"
        
        report_text += "=" * 90 + "\n"
        
        self.text_area.insert('1.0', report_text)
    
    def _load_annual_ppo_report(self):
        """–ì–æ–¥–æ–≤–æ–π –æ—Ç—á–µ—Ç –ü–ü–û - —Ä–∞—Å—á–µ—Ç –ø–ª–∞–Ω–æ–≤—ã—Ö –∑–∞—Ç—Ä–∞—Ç —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ –∫–≤–∞—Ä—Ç–∞–ª–∞–º –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π —Å–º–µ—Ç"""
        events_data = self.db.get_events_by_year(self.year)
        
        if not events_data:
            self.text_area.insert('1.0', "–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–∞ —ç—Ç–æ—Ç –≥–æ–¥")
            return
        
        events = [Event.from_db_row(row) for row in events_data]
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –≤—ã–µ–∑–¥–Ω—ã–µ –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ
        away_events = [e for e in events if e.event_type == "–í—ã–µ–∑–¥–Ω–æ–µ"]
        internal_events = [e for e in events if e.event_type == "–í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ"]
        
        report_text = ""
        report_text += "=" * 180 + "\n"
        report_text += f"–†–ê–°–ß–ï–¢ –ü–õ–ê–ù–û–í–´–• –ó–ê–¢–†–ê–¢ –ù–ê {self.year} –ì–û–î\n"
        report_text += f"–ù–ê –ü–†–û–í–ï–î–ï–ù–ò–ï –ö–£–õ–¨–¢–£–†–ù–û-–ú–ê–°–°–û–í–´–• –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ô –î–Æ–°–ö \"–Ø–ú–ë–£–†–ì\" –ü–ü–û \"–ì–ê–ó–ü–†–û–ú –î–û–ë–´–ß–ê –Ø–ú–ë–£–†–ì –ü–†–û–§–°–û–Æ–ó\"\n"
        report_text += "=" * 180 + "\n\n"
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        report_text += f"{'‚Ññ':<6} {'–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–µ–π –∑–∞—Ç—Ä–∞—Ç/–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π':<60} {'–ú–µ—Å—Ç–æ/–ï–¥.–∏–∑–º.':<20} {'–î–∞—Ç—ã/–ö–æ–ª-–≤–æ':<12} {'–°—Ç–æ–∏–º.':<10} {'–ß–µ–ª.':<5} "
        report_text += f"{'–ó–∞—Ç—Ä–∞—Ç—ã (—Ä—É–±)':>15} {'1 –∫–≤.':>15} {'2 –∫–≤.':>15} {'3 –∫–≤.':>15} {'4 –∫–≤.':>15}\n"
        report_text += "=" * 180 + "\n\n"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—è—Ü—ã –ø–æ –∫–≤–∞—Ä—Ç–∞–ª–∞–º
        q1_months = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç']
        q2_months = ['–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å']
        q3_months = ['–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å']
        q4_months = ['–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å']
        
        def get_quarter(month):
            if month in q1_months: return 1
            if month in q2_months: return 2
            if month in q3_months: return 3
            if month in q4_months: return 4
            return 1
        
        # –†–∞–∑–¥–µ–ª 1: –í—ã–µ–∑–¥–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        if away_events:
            report_text += "1.   –í–´–ï–ó–î–ù–´–ï –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø\n"
            report_text += "-" * 180 + "\n\n"
            
            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç –∏—Ç–æ–≥–æ–≤ –ø–æ –≤—ã–µ–∑–¥–Ω—ã–º
            away_q_totals = {1: 0, 2: 0, 3: 0, 4: 0}
            away_total = 0
            for event in away_events:
                quarter = get_quarter(event.month)
                away_q_totals[quarter] += event.children_budget
                away_total += event.children_budget
            
            # –°–∏–Ω—è—è –∏—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Å—É–º–º–∞–º–∏ –ø–æ –∫–≤–∞—Ä—Ç–∞–ª–∞–º
            report_text += f"{'':<101} "
            report_text += f"{format_rubles(away_total):>15} {format_rubles(away_q_totals[1]):>15} {format_rubles(away_q_totals[2]):>15} "
            report_text += f"{format_rubles(away_q_totals[3]):>15} {format_rubles(away_q_totals[4]):>15}\n"
            report_text += "-" * 180 + "\n\n"
            
            q_totals = {1: 0, 2: 0, 3: 0, 4: 0}
            total_all = 0
            
            for idx, event in enumerate(away_events, 1):
                quarter = get_quarter(event.month)
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–º–µ—Ç—É –ü–ü–û –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                estimates = self.db.get_estimates_by_event(event.id)
                ppo_estimate = None
                for est in estimates:
                    if est[2] == '–ü–ü–û':  # estimate_type
                        ppo_estimate = est
                        break
                
                # –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (—Å —Ç—Ä—ë—Ö–∑–Ω–∞—á–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π: 1.001, 1.002, –∏ —Ç.–¥.)
                report_text += f"1.{idx:03d}  {event.name[:57]:<60} {event.location:<20} {event.month:<12} {'':>10} {'':>5} "
                q_vals = [''] * 4
                q_vals[quarter-1] = format_rubles(event.children_budget)
                report_text += f"{format_rubles(event.children_budget):>15} {q_vals[0]:>15} {q_vals[1]:>15} {q_vals[2]:>15} {q_vals[3]:>15}\n"
                
                # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Å–º–µ—Ç–µ
                if ppo_estimate:
                    estimate_id = ppo_estimate[0]
                    items = self.db.get_estimate_items(estimate_id)
                    
                    for item in items:
                        category = item[2]
                        description = item[3] or ''
                        people_count = item[4] or 0
                        days_count = item[5] or 0
                        rate = item[6] or 0
                        total = item[7] or 0
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
                        if category == "–ü—Ä–æ–µ–∑–¥":
                            report_text += f"       {category:<57} {description:<20} {days_count:<12} {rate:>10.0f} {people_count:<5}\n"
                        elif category == "–ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ":
                            report_text += f"       {category:<57} {'–¥–Ω':<20} {days_count:<12} {rate:>10.0f} {people_count:<5}\n"
                        elif category == "–°—É—Ç–æ—á–Ω—ã–µ":
                            report_text += f"       {category:<57} {'–¥–Ω':<20} {days_count:<12} {rate:>10.0f} {people_count:<5}\n"
                
                report_text += "\n"
                q_totals[quarter] += event.children_budget
                total_all += event.children_budget
            
            report_text += f"{'–ò–¢–û–ì–û –≤—ã–µ–∑–¥–Ω—ã–µ:':<101} "
            report_text += f"{format_rubles(total_all):>15} {format_rubles(q_totals[1]):>15} {format_rubles(q_totals[2]):>15} "
            report_text += f"{format_rubles(q_totals[3]):>15} {format_rubles(q_totals[4]):>15}\n"
            report_text += "\n" + "=" * 180 + "\n\n"
        
        # –†–∞–∑–¥–µ–ª 2: –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        if internal_events:
            report_text += "2.   –í–ù–£–¢–†–ï–ù–ù–ò–ï –ò –ì–û–†–û–î–°–ö–ò–ï –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø\n"
            report_text += "-" * 180 + "\n\n"
            
            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç –∏—Ç–æ–≥–æ–≤ –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º
            internal_q_totals = {1: 0, 2: 0, 3: 0, 4: 0}
            internal_total = 0
            for event in internal_events:
                quarter = get_quarter(event.month)
                internal_q_totals[quarter] += event.children_budget
                internal_total += event.children_budget
            
            # –°–∏–Ω—è—è –∏—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Å—É–º–º–∞–º–∏ –ø–æ –∫–≤–∞—Ä—Ç–∞–ª–∞–º
            report_text += f"{'':<101} "
            report_text += f"{format_rubles(internal_total):>15} {format_rubles(internal_q_totals[1]):>15} {format_rubles(internal_q_totals[2]):>15} "
            report_text += f"{format_rubles(internal_q_totals[3]):>15} {format_rubles(internal_q_totals[4]):>15}\n"
            report_text += "-" * 180 + "\n\n"
            
            q_totals = {1: 0, 2: 0, 3: 0, 4: 0}
            total_all = 0
            
            for idx, event in enumerate(internal_events, 1):
                quarter = get_quarter(event.month)
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–º–µ—Ç—É –ü–ü–û –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                estimates = self.db.get_estimates_by_event(event.id)
                ppo_estimate = None
                for est in estimates:
                    if est[2] == '–ü–ü–û':  # estimate_type
                        ppo_estimate = est
                        break
                
                # –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (—Ç—Ä—ë—Ö–∑–Ω–∞—á–Ω–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏—è: 2.001, 2.002, –∏ —Ç.–¥.)
                report_text += f"2.{idx:03d}  {event.name[:57]:<60} {event.location:<20} {event.month:<12} {'':>10} {'':>5} "
                q_vals = [''] * 4
                q_vals[quarter-1] = format_rubles(event.children_budget)
                report_text += f"{format_rubles(event.children_budget):>15} {q_vals[0]:>15} {q_vals[1]:>15} {q_vals[2]:>15} {q_vals[3]:>15}\n"
                
                # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Å–º–µ—Ç–µ
                if ppo_estimate:
                    estimate_id = ppo_estimate[0]
                    items = self.db.get_estimate_items(estimate_id)
                    
                    for item in items:
                        category = item[2]
                        description = item[3] or ''
                        people_count = item[4] or 0
                        days_count = item[5] or 0
                        rate = item[6] or 0
                        total = item[7] or 0
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ - –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –≤—ã–≤–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
                        report_text += f"       {category:<57} {description[:20]:<20} {days_count:<12} {rate:>10.0f} {people_count:<5}\n"
                
                report_text += "\n"
                q_totals[quarter] += event.children_budget
                total_all += event.children_budget
            
            report_text += "\n"
            report_text += f"{'–ò–¢–û–ì–û –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ:':<101} "
            report_text += f"{format_rubles(total_all):>15} {format_rubles(q_totals[1]):>15} {format_rubles(q_totals[2]):>15} "
            report_text += f"{format_rubles(q_totals[3]):>15} {format_rubles(q_totals[4]):>15}\n"
            report_text += "\n" + "=" * 180 + "\n\n"
        
        # –û–±—â–∏–π –∏—Ç–æ–≥
        grand_total = sum(e.children_budget for e in events)
        grand_q_totals = {1: 0, 2: 0, 3: 0, 4: 0}
        for event in events:
            quarter = get_quarter(event.month)
            grand_q_totals[quarter] += event.children_budget
        
        report_text += f"{'–í–°–ï–ì–û –ò–¢–û–ì–û:':<101} "
        report_text += f"{format_rubles(grand_total):>15} {format_rubles(grand_q_totals[1]):>15} {format_rubles(grand_q_totals[2]):>15} "
        report_text += f"{format_rubles(grand_q_totals[3]):>15} {format_rubles(grand_q_totals[4]):>15}\n"
        report_text += "=" * 180 + "\n"
        
        self.text_area.insert('1.0', report_text)
    
    def _load_annual_uevp_report(self):
        """–ì–æ–¥–æ–≤–æ–π –æ—Ç—á–µ—Ç –£–≠–í–ü - —Ä–∞—Å—á–µ—Ç –ø–ª–∞–Ω–æ–≤—ã—Ö –∑–∞—Ç—Ä–∞—Ç —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º"""
        events_data = self.db.get_events_by_year(self.year)
        
        if not events_data:
            self.text_area.insert('1.0', "–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–∞ —ç—Ç–æ—Ç –≥–æ–¥")
            return
        
        events = [Event.from_db_row(row) for row in events_data]
        # –¢–æ–ª—å–∫–æ –≤—ã–µ–∑–¥–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        away_events = [e for e in events if e.event_type == "–í—ã–µ–∑–¥–Ω–æ–µ"]
        
        if not away_events:
            self.text_area.insert('1.0', "–ù–µ—Ç –≤—ã–µ–∑–¥–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–∞ —ç—Ç–æ—Ç –≥–æ–¥")
            return
        
        report_text = ""
        report_text += "=" * 250 + "\n"
        report_text += f"–û–¢–ß–ï–¢ –ü–û –ö–û–ú–ê–ù–î–ò–†–û–í–ö–ê–ú –¢–†–ï–ù–ï–†–û–í –î–Æ–°–ö \"–Ø–ú–ë–£–†–ì\" –ó–ê {self.year} –ì–û–î (–§. –£–≠–í–ü)\n"
        report_text += "=" * 250 + "\n\n"
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        report_text += f"{'–î–æ–ª–∂–Ω–æ—Å—Ç—å':<20} {'–ú–µ—Å—è—Ü':<12} {'–î–Ω–∏':<6} {'–ì–æ—Ä–æ–¥':<25} {'–¶–µ–ª—å –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏':<50} "
        report_text += f"{'–ü—Ä–æ–µ–∑–¥':>12} {'–ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ':>12} {'–°—É—Ç–æ—á–Ω—ã–µ':>12} {'–ò—Ç–æ–≥–æ':>12} {'–§–∞–∫—Ç':>12} {'–≠–∫/–ü–µ—Ä':>12}\n"
        report_text += "=" * 250 + "\n"
        
        total_proezd = 0
        total_prozhivanie = 0
        total_sutochnie = 0
        total_all = 0
        total_fact = 0
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é
        for event in away_events:
            # –ü–æ–ª—É—á–∞–µ–º —Å–º–µ—Ç—É –£–≠–í–ü –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            estimate_data = self.db.cursor.execute('''
                SELECT id, total_amount
                FROM estimates
                WHERE event_id = ? AND estimate_type = '–£–≠–í–ü'
            ''', (event.id,)).fetchone()
            
            if not estimate_data:
                continue
            
            estimate_id = estimate_data[0]
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å–º–µ—Ç—ã (–ø—Ä–æ–µ–∑–¥, –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ, —Å—É—Ç–æ—á–Ω—ã–µ)
            items = self.db.cursor.execute('''
                SELECT category, SUM(total) as total, MAX(days_count) as days
                FROM estimate_items
                WHERE estimate_id = ?
                GROUP BY category
            ''', (estimate_id,)).fetchall()
            
            proezd = 0
            prozhivanie = 0
            sutochnie = 0
            days = 0
            
            for category, total, day_count in items:
                if category == '–ü—Ä–æ–µ–∑–¥':
                    proezd = total
                elif category == '–ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ':
                    prozhivanie = total
                    days = day_count or days
                elif category == '–°—É—Ç–æ—á–Ω—ã–µ':
                    sutochnie = total
                    days = day_count or days
            
            # –ï—Å–ª–∏ –¥–Ω–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã, —Å—Ç–∞–≤–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if days == 0:
                days = 5
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ü–µ–ª—å –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏
            purpose = f"–°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ {event.name} –ø–æ –≤–∏–¥—É —Å–ø–æ—Ä—Ç–∞ {event.sport}"
            if len(purpose) > 48:
                purpose = purpose[:47] + "..."
            
            # –ò—Ç–æ–≥–æ –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é
            event_total = proezd + prozhivanie + sutochnie
            
            # –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã - —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö –∏ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö
            fact = ""
            economy = ""
            if event.status in ["–ü—Ä–æ–≤–µ–¥–µ–Ω–æ", "–û—Ç–º–µ–Ω–µ–Ω–æ"]:
                fact_amount = event.actual_trainers_budget if event.actual_trainers_budget is not None else event_total
                fact = f"{fact_amount:>12.2f}"
                economy_amount = event_total - fact_amount
                economy = f"{economy_amount:>+12.2f}" if economy_amount != 0 else f"{'0.00':>12}"
                total_fact += fact_amount
            else:
                fact = f"{'-':>12}"
                economy = f"{'-':>12}"
            
            # –ü–µ—á–∞—Ç–∞–µ–º —Å—Ç—Ä–æ–∫—É
            report_text += f"{'–¢—Ä–µ–Ω–µ—Ä':<20} {event.month:<12} {days:<6} {event.location[:24]:<25} "
            report_text += f"{purpose:<50} {proezd:>12.2f} {prozhivanie:>12.2f} {sutochnie:>12.2f} "
            report_text += f"{event_total:>12.2f} {fact} {economy}\n"
            
            total_proezd += proezd
            total_prozhivanie += prozhivanie
            total_sutochnie += sutochnie
            total_all += event_total
        
        report_text += "=" * 250 + "\n"
        
        # –ò—Ç–æ–≥–æ
        report_text += f"{'–ò–¢–û–ì–û:':<20} {'':<12} {'':<6} {'':<25} {'':<50} "
        report_text += f"{total_proezd:>12.2f} {total_prozhivanie:>12.2f} {total_sutochnie:>12.2f} "
        report_text += f"{total_all:>12.2f} "
        
        if total_fact > 0:
            total_economy = total_all - total_fact
            report_text += f"{total_fact:>12.2f} {total_economy:>+12.2f}\n"
        else:
            report_text += f"{'-':>12} {'-':>12}\n"
        
        report_text += "=" * 250 + "\n"
        
        self.text_area.insert('1.0', report_text)
    
    def _save_report(self, format_type):
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á—ë—Ç –≤ —Ñ–∞–π–ª
        
        Args:
            format_type: –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ ('txt', 'csv', 'html')
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏ —Ñ–∏–ª—å—Ç—Ä
        extensions = {
            'txt': ('–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª', '*.txt'),
            'csv': ('CSV —Ñ–∞–π–ª', '*.csv'),
            'html': ('HTML —Ñ–∞–π–ª', '*.html')
        }
        
        report_names = {
            'full': '–ü–æ–ª–Ω—ã–π_–ø–ª–∞–Ω',
            'financial': '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π_–æ—Ç—á—ë—Ç',
            'sports': '–ü–æ_–≤–∏–¥–∞–º_—Å–ø–æ—Ä—Ç–∞',
            'status': '–ü–æ_—Å—Ç–∞—Ç—É—Å–∞–º',
            'summary': '–ö—Ä–∞—Ç–∫–∞—è_—Å–≤–æ–¥–∫–∞',
            'by_type': '–ü–æ_—Ç–∏–ø–∞–º_–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π',
            'annual_ppo': '–ì–æ–¥–æ–≤–æ–π_–æ—Ç—á–µ—Ç_–ü–ü–û',
            'annual_uevp': '–ì–æ–¥–æ–≤–æ–π_–æ—Ç—á–µ—Ç_–£–≠–í–ü'
        }
        
        default_name = f"calendar_{self.year}_{report_names.get(self.current_report_type, 'report')}"
        
        # –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        filename = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á—ë—Ç",
            defaultextension=f".{format_type}",
            filetypes=[extensions[format_type], ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")],
            initialfile=f"{default_name}.{format_type}"
        )
        
        if not filename:
            return
        
        try:
            if format_type == 'txt':
                self._save_as_txt(filename)
            elif format_type == 'csv':
                self._save_as_csv(filename)
            elif format_type == 'html':
                self._save_as_html(filename)
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º HTML –≤ –±—Ä–∞—É–∑–µ—Ä–µ
                try:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—É—Ç—å –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π URL –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
                    abs_path = os.path.abspath(filename)
                    webbrowser.open('file://' + abs_path)
                    messagebox.showinfo("–£—Å–ø–µ—à–Ω–æ", f"–û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ:\n{filename}")
                except Exception as browser_error:
                    messagebox.showinfo("–£—Å–ø–µ—à–Ω–æ", f"–û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω:\n{filename}\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
                return  # –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            
            messagebox.showinfo("–£—Å–ø–µ—à–Ω–æ", f"–û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω:\n{filename}")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á—ë—Ç:\n{str(e)}")
    
    def _save_as_txt(self, filename):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á—ë—Ç –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"""
        content = self.text_area.get('1.0', tk.END)
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(content)
    
    def _save_as_csv(self, filename):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á—ë—Ç –∫–∞–∫ CSV"""
        events_data = self.db.get_events_by_year(self.year)
        events = [Event.from_db_row(row) for row in events_data]
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
        if self.current_report_type == 'financial':
            # –î–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ - –≤—Å–µ —Å–æ–±—ã—Ç–∏—è, –Ω–æ —Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            filtered_events = events
        elif self.current_report_type == 'sports':
            # –î–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Å–ø–æ—Ä—Ç–∞–º - –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
            filtered_events = events
        elif self.current_report_type == 'status':
            # –î–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º - –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
            filtered_events = events
        elif self.current_report_type == 'summary':
            # –î–ª—è –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏ - –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
            filtered_events = events
        elif self.current_report_type == 'by_type':
            # –î–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Ç–∏–ø–∞–º - –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
            filtered_events = events
        elif self.current_report_type == 'annual_ppo':
            # –î–ª—è –≥–æ–¥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ü–ü–û - –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
            filtered_events = events
        elif self.current_report_type == 'annual_uevp':
            # –î–ª—è –≥–æ–¥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –£–≠–í–ü - —Ç–æ–ª—å–∫–æ –≤—ã–µ–∑–¥–Ω—ã–µ
            filtered_events = [e for e in events if e.event_type == "–í—ã–µ–∑–¥–Ω–æ–µ"]
        else:  # 'full'
            filtered_events = events
        
        with open(filename, 'w', newline='', encoding='utf-8-sig') as f:
            writer = csv.writer(f, delimiter=';')
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
            if self.current_report_type == 'financial':
                writer.writerow([
                    '–í–∏–¥ —Å–ø–æ—Ä—Ç–∞', '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π',
                    '–ü–ª–∞–Ω: –¥–µ—Ç–µ–π (‚ÇΩ)', '–§–∞–∫—Ç: –¥–µ—Ç–µ–π (‚ÇΩ)', '–≠–∫–æ–Ω–æ–º–∏—è/–ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥ –ü–ü–û', '–û—Å—Ç–∞—Ç–æ–∫ –ü–ü–û',
                    '–ü–ª–∞–Ω: —Ç—Ä–µ–Ω–µ—Ä—ã (‚ÇΩ)', '–§–∞–∫—Ç: —Ç—Ä–µ–Ω–µ—Ä—ã (‚ÇΩ)', '–≠–∫–æ–Ω–æ–º–∏—è/–ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥ –£–≠–í–ü', '–û—Å—Ç–∞—Ç–æ–∫ –£–≠–í–ü'
                ])
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤–∏–¥–∞–º —Å–ø–æ—Ä—Ç–∞
                sport_stats = {}
                for event in filtered_events:
                    if event.sport not in sport_stats:
                        sport_stats[event.sport] = {
                            'count': 0, 
                            'plan_children': 0, 'fact_children': 0,
                            'plan_trainers': 0, 'fact_trainers': 0,
                            'plan_children_completed': 0,  # –ü–ª–∞–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö
                            'plan_trainers_completed': 0   # –ü–ª–∞–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö
                        }
                    
                    sport_stats[event.sport]['count'] += 1
                    sport_stats[event.sport]['plan_children'] += event.children_budget
                    sport_stats[event.sport]['plan_trainers'] += event.trainers_budget
                    
                    # –§–∞–∫—Ç –∏ –ø–ª–∞–Ω –¥–ª—è –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö (–¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —ç–∫–æ–Ω–æ–º–∏–∏/–ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥–∞)
                    if event.status in ["–ü—Ä–æ–≤–µ–¥–µ–Ω–æ", "–û—Ç–º–µ–Ω–µ–Ω–æ"]:
                        sport_stats[event.sport]['plan_children_completed'] += event.children_budget
                        sport_stats[event.sport]['plan_trainers_completed'] += event.trainers_budget
                        
                        if event.status == "–ü—Ä–æ–≤–µ–¥–µ–Ω–æ":
                            if event.actual_children_budget is not None:
                                sport_stats[event.sport]['fact_children'] += event.actual_children_budget
                            else:
                                # –ï—Å–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ, –Ω–æ —Ñ–∞–∫—Ç –Ω–µ —É–∫–∞–∑–∞–Ω - –±–µ—Ä—ë–º –ø–ª–∞–Ω
                                sport_stats[event.sport]['fact_children'] += event.children_budget
                            
                            if event.actual_trainers_budget is not None:
                                sport_stats[event.sport]['fact_trainers'] += event.actual_trainers_budget
                            else:
                                # –ï—Å–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ, –Ω–æ —Ñ–∞–∫—Ç –Ω–µ —É–∫–∞–∑–∞–Ω - –±–µ—Ä—ë–º –ø–ª–∞–Ω
                                sport_stats[event.sport]['fact_trainers'] += event.trainers_budget
                        # –î–ª—è –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç = 0 (–Ω–µ —Ç—Ä–∞—Ç–∏–ª–∏)
                    # –î–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö, –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω–Ω—ã—Ö - —Ñ–∞–∫—Ç = 0
                
                for sport in sorted(sport_stats.keys()):
                    stats = sport_stats[sport]
                    # –û—Å—Ç–∞—Ç–æ–∫ = –ü–ª–∞–Ω –≤—Å–µ—Ö - –§–∞–∫—Ç (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ = –æ—Å—Ç–∞—Ç–æ–∫, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ = –ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥)
                    ostatok_c = stats['plan_children'] - stats['fact_children']
                    ostatok_t = stats['plan_trainers'] - stats['fact_trainers']
                    
                    # –≠–∫–æ–Ω–æ–º–∏—è/–ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥ = –ü–ª–∞–Ω - –§–∞–∫—Ç –¢–û–õ–¨–ö–û –¥–ª—è –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö
                    # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ = —ç–∫–æ–Ω–æ–º–∏—è, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ = –ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥
                    if stats['plan_children_completed'] > 0:
                        diff_c = stats['plan_children_completed'] - stats['fact_children']
                        diff_c_str = f"{diff_c:.2f}"
                    else:
                        diff_c_str = "–Ω/–¥"  # –ù–µ—Ç –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
                    
                    if stats['plan_trainers_completed'] > 0:
                        diff_t = stats['plan_trainers_completed'] - stats['fact_trainers']
                        diff_t_str = f"{diff_t:.2f}"
                    else:
                        diff_t_str = "–Ω/–¥"  # –ù–µ—Ç –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
                    
                    writer.writerow([
                        sport, stats['count'],
                        f"{stats['plan_children']:.2f}", f"{stats['fact_children']:.2f}", diff_c_str, f"{ostatok_c:.2f}",
                        f"{stats['plan_trainers']:.2f}", f"{stats['fact_trainers']:.2f}", diff_t_str, f"{ostatok_t:.2f}"
                    ])
            
            elif self.current_report_type == 'status':
                writer.writerow([
                    '–°—Ç–∞—Ç—É—Å', '–ú–µ—Å—è—Ü', '–í–∏–¥ —Å–ø–æ—Ä—Ç–∞', '–¢–∏–ø', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–ú–µ—Å—Ç–æ', '–ü—Ä–∏–º–µ—á–∞–Ω–∏—è'
                ])
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É –∏ –º–µ—Å—è—Ü—É
                for event in sorted(filtered_events, key=lambda e: (e.status or "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ", MONTHS.index(e.month) if e.month in MONTHS else 999)):
                    writer.writerow([
                        event.status or '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ',
                        event.month,
                        event.sport,
                        event.event_type,
                        event.name,
                        event.location,
                        event.notes or ""
                    ])
            
            elif self.current_report_type == 'sports':
                writer.writerow([
                    '–í–∏–¥ —Å–ø–æ—Ä—Ç–∞', '–ú–µ—Å—è—Ü', '–¢–∏–ø', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–ú–µ—Å—Ç–æ', '–°—Ç–∞—Ç—É—Å',
                    '–ü–ª–∞–Ω: –¥–µ—Ç–µ–π (‚ÇΩ)', '–ü–ª–∞–Ω: —Ç—Ä–µ–Ω–µ—Ä—ã (‚ÇΩ)'
                ])
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–ø–æ—Ä—Ç—É –∏ –º–µ—Å—è—Ü—É
                for event in sorted(filtered_events, key=lambda e: (e.sport, MONTHS.index(e.month) if e.month in MONTHS else 999)):
                    writer.writerow([
                        event.sport,
                        event.month,
                        event.event_type,
                        event.name,
                        event.location,
                        event.status or '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ',
                        f"{event.children_budget:.2f}",
                        f"{event.trainers_budget:.2f}"
                    ])
            
            elif self.current_report_type == 'by_type':
                writer.writerow([
                    '–í–∏–¥ —Å–ø–æ—Ä—Ç–∞', '–¢–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π',
                    '–ü–ª–∞–Ω: –¥–µ—Ç–µ–π (‚ÇΩ)', '–§–∞–∫—Ç: –¥–µ—Ç–µ–π (‚ÇΩ)', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–µ—Ç–µ–π',
                    '–ü–ª–∞–Ω: —Ç—Ä–µ–Ω–µ—Ä—ã (‚ÇΩ)', '–§–∞–∫—Ç: —Ç—Ä–µ–Ω–µ—Ä—ã (‚ÇΩ)', '–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–æ–≤'
                ])
                
                # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–∏–¥–∞–º —Å–ø–æ—Ä—Ç–∞ –∏ —Ç–∏–ø–∞–º
                sport_stats = {}
                for event in filtered_events:
                    if event.sport not in sport_stats:
                        sport_stats[event.sport] = {
                            '–í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ': {'count': 0, 'plan_children': 0, 'fact_children': 0, 'plan_trainers': 0, 'fact_trainers': 0, 'plan_children_completed': 0, 'plan_trainers_completed': 0},
                            '–í—ã–µ–∑–¥–Ω–æ–µ': {'count': 0, 'plan_children': 0, 'fact_children': 0, 'plan_trainers': 0, 'fact_trainers': 0, 'plan_children_completed': 0, 'plan_trainers_completed': 0}
                        }
                    
                    event_type = event.event_type
                    stats = sport_stats[event.sport][event_type]
                    stats['count'] += 1
                    stats['plan_children'] += event.children_budget
                    stats['plan_trainers'] += event.trainers_budget
                    
                    if event.status in ["–ü—Ä–æ–≤–µ–¥–µ–Ω–æ", "–û—Ç–º–µ–Ω–µ–Ω–æ"]:
                        stats['plan_children_completed'] += event.children_budget
                        stats['plan_trainers_completed'] += event.trainers_budget
                        
                        if event.status == "–ü—Ä–æ–≤–µ–¥–µ–Ω–æ":
                            stats['fact_children'] += event.actual_children_budget if event.actual_children_budget else event.children_budget
                            stats['fact_trainers'] += event.actual_trainers_budget if event.actual_trainers_budget else event.trainers_budget
                
                # –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ
                for sport in sorted(sport_stats.keys()):
                    for event_type in ['–í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ', '–í—ã–µ–∑–¥–Ω–æ–µ']:
                        stats = sport_stats[sport][event_type]
                        if stats['count'] > 0:
                            diff_c = stats['plan_children_completed'] - stats['fact_children'] if stats['plan_children_completed'] > 0 else 0
                            diff_t = stats['plan_trainers_completed'] - stats['fact_trainers'] if stats['plan_trainers_completed'] > 0 else 0
                            
                            writer.writerow([
                                sport,
                                event_type,
                                stats['count'],
                                f"{stats['plan_children']:.2f}",
                                f"{stats['fact_children']:.2f}",
                                f"{diff_c:.2f}",
                                f"{stats['plan_trainers']:.2f}",
                                f"{stats['fact_trainers']:.2f}",
                                f"{diff_t:.2f}"
                            ])
            
            elif self.current_report_type == 'annual_ppo':
                writer.writerow([
                    '‚Ññ', '–¢–∏–ø', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–ú–µ—Å—Ç–æ', '–ú–µ—Å—è—Ü', '–ó–∞—Ç—Ä–∞—Ç—ã (—Ä—É–±)', '1 –∫–≤.', '2 –∫–≤.', '3 –∫–≤.', '4 –∫–≤.',
                    '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤', '–û–ø–∏—Å–∞–Ω–∏–µ/–ú–∞—Ä—à—Ä—É—Ç', '–î–Ω–∏/–ö–æ–ª-–≤–æ', '–°—Ç–∞–≤–∫–∞', '–ß–µ–ª–æ–≤–µ–∫', '–°—É–º–º–∞'
                ])
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–≤–∞—Ä—Ç–∞–ª
                q_map = {
                    '–Ø–Ω–≤–∞—Ä—å': 1, '–§–µ–≤—Ä–∞–ª—å': 1, '–ú–∞—Ä—Ç': 1,
                    '–ê–ø—Ä–µ–ª—å': 2, '–ú–∞–π': 2, '–ò—é–Ω—å': 2,
                    '–ò—é–ª—å': 3, '–ê–≤–≥—É—Å—Ç': 3, '–°–µ–Ω—Ç—è–±—Ä—å': 3,
                    '–û–∫—Ç—è–±—Ä—å': 4, '–ù–æ—è–±—Ä—å': 4, '–î–µ–∫–∞–±—Ä—å': 4
                }
                
                # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –≤—ã–µ–∑–¥–Ω—ã–µ –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ
                away_events_csv = [e for e in filtered_events if e.event_type == "–í—ã–µ–∑–¥–Ω–æ–µ"]
                internal_events_csv = [e for e in filtered_events if e.event_type == "–í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ"]
                
                # 1. –í–´–ï–ó–î–ù–´–ï –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø
                if away_events_csv:
                    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
                    writer.writerow(['', '1. –í–´–ï–ó–î–ù–´–ï –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø', '', '', '', '', '', '', '', '', '', '', '', '', '', ''])
                    
                    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç –∏—Ç–æ–≥–æ–≤
                    away_q_totals_csv = {1: 0, 2: 0, 3: 0, 4: 0}
                    away_total_csv = 0
                    for event in away_events_csv:
                        quarter = q_map.get(event.month, 1)
                        away_q_totals_csv[quarter] += event.children_budget
                        away_total_csv += event.children_budget
                    
                    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
                    writer.writerow([
                        '', '', '', '', '', 
                        format_number_ru(away_total_csv),
                        format_number_ru(away_q_totals_csv[1]),
                        format_number_ru(away_q_totals_csv[2]),
                        format_number_ru(away_q_totals_csv[3]),
                        format_number_ru(away_q_totals_csv[4]),
                        '', '', '', '', '', ''
                    ])
                    
                    # –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                    for idx, event in enumerate(away_events_csv, 1):
                        quarter = q_map.get(event.month, 1)
                        q_vals = ['', '', '', '']
                        q_vals[quarter-1] = format_number_ru(event.children_budget)
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Å–º–µ—Ç—É –ü–ü–û
                        estimates = self.db.get_estimates_by_event(event.id)
                        ppo_estimate = None
                        for est in estimates:
                            if est[2] == '–ü–ü–û':
                                ppo_estimate = est
                                break
                        
                        # –°—Ç—Ä–æ–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                        writer.writerow([
                            f"1.{idx:03d}",
                            event.event_type,
                            event.name,
                            event.location,
                            event.month,
                            format_number_ru(event.children_budget),
                            q_vals[0], q_vals[1], q_vals[2], q_vals[3],
                            '', '', '', '', '', ''
                        ])
                        
                        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Å–º–µ—Ç–µ
                        if ppo_estimate:
                            estimate_id = ppo_estimate[0]
                            items = self.db.get_estimate_items(estimate_id)
                            
                            for item in items:
                                category = item[2]
                                description = item[3] or ''
                                days_count = item[5] or 0
                                rate = item[6] or 0
                                people_count = item[4] or 0
                                total = item[7] or 0
                                
                                writer.writerow([
                                    '', '', '', '', '', '', '', '', '', '',
                                    category,
                                    description,
                                    days_count,
                                    format_number_ru(rate),
                                    people_count,
                                    format_number_ru(total)
                                ])
                
                # 2. –í–ù–£–¢–†–ï–ù–ù–ò–ï –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø
                if internal_events_csv:
                    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
                    writer.writerow(['', '2. –í–ù–£–¢–†–ï–ù–ù–ò–ï –ò –ì–û–†–û–î–°–ö–ò–ï –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø', '', '', '', '', '', '', '', '', '', '', '', '', '', ''])
                    
                    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç –∏—Ç–æ–≥–æ–≤
                    internal_q_totals_csv = {1: 0, 2: 0, 3: 0, 4: 0}
                    internal_total_csv = 0
                    for event in internal_events_csv:
                        quarter = q_map.get(event.month, 1)
                        internal_q_totals_csv[quarter] += event.children_budget
                        internal_total_csv += event.children_budget
                    
                    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
                    writer.writerow([
                        '', '', '', '', '',
                        format_number_ru(internal_total_csv),
                        format_number_ru(internal_q_totals_csv[1]),
                        format_number_ru(internal_q_totals_csv[2]),
                        format_number_ru(internal_q_totals_csv[3]),
                        format_number_ru(internal_q_totals_csv[4]),
                        '', '', '', '', '', ''
                    ])
                    
                    # –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                    for idx, event in enumerate(internal_events_csv, 1):
                        quarter = q_map.get(event.month, 1)
                        q_vals = ['', '', '', '']
                        q_vals[quarter-1] = format_number_ru(event.children_budget)
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Å–º–µ—Ç—É –ü–ü–û
                        estimates = self.db.get_estimates_by_event(event.id)
                        ppo_estimate = None
                        for est in estimates:
                            if est[2] == '–ü–ü–û':
                                ppo_estimate = est
                                break
                        
                        # –°—Ç—Ä–æ–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                        writer.writerow([
                            f"2.{idx:03d}",
                            event.event_type,
                            event.name,
                            event.location,
                            event.month,
                            format_number_ru(event.children_budget),
                            q_vals[0], q_vals[1], q_vals[2], q_vals[3],
                            '', '', '', '', '', ''
                        ])
                        
                        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Å–º–µ—Ç–µ
                        if ppo_estimate:
                            estimate_id = ppo_estimate[0]
                            items = self.db.get_estimate_items(estimate_id)
                            
                            for item in items:
                                category = item[2]
                                description = item[3] or ''
                                days_count = item[5] or 0
                                rate = item[6] or 0
                                people_count = item[4] or 0
                                total = item[7] or 0
                                
                                writer.writerow([
                                    '', '', '', '', '', '', '', '', '', '',
                                    category,
                                    description,
                                    days_count,
                                    format_number_ru(rate),
                                    people_count,
                                    format_number_ru(total)
                                ])
            
            elif self.current_report_type == 'annual_uevp':
                writer.writerow([
                    '–î–æ–ª–∂–Ω–æ—Å—Ç—å', '–ú–µ—Å—è—Ü', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π', '–ì–æ—Ä–æ–¥', '–¶–µ–ª—å –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏',
                    '–†–∞—Å—Ö–æ–¥—ã –Ω–∞ –ø—Ä–æ–µ–∑–¥, —Ä—É–±.', '–†–∞—Å—Ö–æ–¥—ã –Ω–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ, —Ä—É–±.', '–°—É—Ç–æ—á–Ω—ã–µ, —Ä—É–±.',
                    '–ò—Ç–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤, —Ä—É–±.', '–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã', '–≠–∫–æ–Ω–æ–º–∏—è/–ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥'
                ])
                
                for event in filtered_events:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–º–µ—Ç—É –£–≠–í–ü –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                    estimate_data = self.db.cursor.execute('''
                        SELECT id, total_amount
                        FROM estimates
                        WHERE event_id = ? AND estimate_type = '–£–≠–í–ü'
                    ''', (event.id,)).fetchone()
                    
                    if not estimate_data:
                        continue
                    
                    estimate_id = estimate_data[0]
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å–º–µ—Ç—ã
                    items = self.db.cursor.execute('''
                        SELECT category, SUM(total) as total, MAX(days_count) as days
                        FROM estimate_items
                        WHERE estimate_id = ?
                        GROUP BY category
                    ''', (estimate_id,)).fetchall()
                    
                    proezd = 0
                    prozhivanie = 0
                    sutochnie = 0
                    days = 0
                    
                    for category, total, day_count in items:
                        if category == '–ü—Ä–æ–µ–∑–¥':
                            proezd = total
                        elif category == '–ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ':
                            prozhivanie = total
                            days = day_count or days
                        elif category == '–°—É—Ç–æ—á–Ω—ã–µ':
                            sutochnie = total
                            days = day_count or days
                    
                    if days == 0:
                        days = 5
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ü–µ–ª—å –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏
                    purpose = f"–°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ {event.name} –ø–æ –≤–∏–¥—É —Å–ø–æ—Ä—Ç–∞ {event.sport}"
                    
                    # –ò—Ç–æ–≥–æ –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é
                    event_total = proezd + prozhivanie + sutochnie
                    
                    # –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã - —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö –∏ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö
                    fact_str = ""
                    economy_str = ""
                    if event.status in ["–ü—Ä–æ–≤–µ–¥–µ–Ω–æ", "–û—Ç–º–µ–Ω–µ–Ω–æ"]:
                        fact_amount = event.actual_trainers_budget if event.actual_trainers_budget is not None else event_total
                        fact_str = format_number_ru(fact_amount)
                        economy_amount = event_total - fact_amount
                        economy_str = format_number_ru(economy_amount)
                    
                    writer.writerow([
                        '–¢—Ä–µ–Ω–µ—Ä',
                        event.month,
                        days,
                        event.location,
                        purpose,
                        format_number_ru(proezd),
                        format_number_ru(prozhivanie),
                        format_number_ru(sutochnie),
                        format_number_ru(event_total),
                        fact_str,
                        economy_str
                    ])
            
            else:  # 'full' –∏ 'summary'
                writer.writerow([
                    'ID', '–ú–µ—Å—è—Ü', '–¢–∏–ø', '–í–∏–¥ —Å–ø–æ—Ä—Ç–∞', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–ú–µ—Å—Ç–æ',
                    '–ü–ª–∞–Ω: –¥–µ—Ç–µ–π (‚ÇΩ)', '–ü–ª–∞–Ω: —Ç—Ä–µ–Ω–µ—Ä—ã (‚ÇΩ)',
                    '–°—Ç–∞—Ç—É—Å', '–§–∞–∫—Ç: –¥–∞—Ç—ã', '–§–∞–∫—Ç: –¥–µ—Ç–µ–π (‚ÇΩ)', '–§–∞–∫—Ç: —Ç—Ä–µ–Ω–µ—Ä—ã (‚ÇΩ)',
                    '–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã', '–ü—Ä–∏–º–µ—á–∞–Ω–∏—è'
                ])
                
                # –î–∞–Ω–Ω—ã–µ
                for event in filtered_events:
                    fact_dates = ""
                    if event.actual_start_date and event.actual_end_date:
                        fact_dates = f"{event.actual_start_date} - {event.actual_end_date}"
                    elif event.actual_start_date:
                        fact_dates = event.actual_start_date
                    
                    writer.writerow([
                        event.id,
                        event.month,
                        event.event_type,
                        event.sport,
                        event.name,
                        event.location,
                        format_number_ru(event.children_budget),
                        format_number_ru(event.trainers_budget),
                        event.status or '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ',
                        fact_dates,
                        format_number_ru(event.actual_children_budget) if event.actual_children_budget else "",
                        format_number_ru(event.actual_trainers_budget) if event.actual_trainers_budget else "",
                        event.cancellation_reason or "",
                        event.notes or ""
                    ])
    
    def _save_as_html(self, filename):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á—ë—Ç –∫–∞–∫ HTML"""
        events_data = self.db.get_events_by_year(self.year)
        events = [Event.from_db_row(row) for row in events_data]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
        report_titles = {
            'full': '–ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω',
            'financial': '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç',
            'sports': '–û—Ç—á—ë—Ç –ø–æ –≤–∏–¥–∞–º —Å–ø–æ—Ä—Ç–∞',
            'status': '–û—Ç—á—ë—Ç –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º',
            'summary': '–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞',
            'by_type': '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç –ø–æ —Ç–∏–ø–∞–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π',
            'annual_ppo': '–ì–æ–¥–æ–≤–æ–π –æ—Ç—á–µ—Ç –ü–ü–û',
            'annual_uevp': '–ì–æ–¥–æ–≤–æ–π –æ—Ç—á–µ—Ç –£–≠–í–ü'
        }
        
        title = report_titles.get(self.current_report_type, '–ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω')
        
        # –°—Ç–∏–ª–∏ –¥–ª—è –ø–µ—á–∞—Ç–∏
        html_content = f"""
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>{title} {self.year}</title>
    <style>
        body {{
            font-family: 'Segoe UI', Arial, sans-serif;
            margin: 20px;
            background: #fff;
        }}
        h1 {{
            color: #0066B3;
            text-align: center;
        }}
        h2 {{
            color: #004B87;
            border-bottom: 2px solid #0066B3;
            padding-bottom: 5px;
            margin-top: 30px;
        }}
        table {{
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }}
        th {{
            background-color: #0066B3;
            color: white;
            padding: 10px;
            text-align: left;
            font-weight: bold;
        }}
        td {{
            padding: 8px;
            border-bottom: 1px solid #ddd;
        }}
        tr:nth-child(even) {{
            background-color: #f2f2f2;
        }}
        .status-completed {{
            background-color: #d4edda;
        }}
        .status-cancelled {{
            background-color: #f8d7da;
        }}
        .status-postponed {{
            background-color: #fff3cd;
        }}
        .summary {{
            background: #f5f7fa;
            padding: 15px;
            border-left: 4px solid #0066B3;
            margin: 20px 0;
        }}
        @media print {{
            body {{ margin: 0; }}
            h1 {{ page-break-after: avoid; }}
            table {{ page-break-inside: avoid; }}
        }}
    </style>
</head>
<body>
    <h1>{title} –Ω–∞ {self.year} –≥–æ–¥</h1>
    <h2>–î–Æ–°–ö –Ø–º–±—É—Ä–≥</h2>
"""
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
        if self.current_report_type == 'financial':
            # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç
            html_content += """
    <table>
        <thead>
            <tr>
                <th>–í–∏–¥ —Å–ø–æ—Ä—Ç–∞</th>
                <th>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π</th>
                <th>–ü–ª–∞–Ω: –¥–µ—Ç–µ–π (‚ÇΩ)</th>
                <th>–§–∞–∫—Ç: –¥–µ—Ç–µ–π (‚ÇΩ)</th>
                <th>–≠–∫–æ–Ω–æ–º–∏—è/–ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥ –ü–ü–û</th>
                <th>–û—Å—Ç–∞—Ç–æ–∫ –ü–ü–û</th>
                <th>–ü–ª–∞–Ω: —Ç—Ä–µ–Ω–µ—Ä—ã (‚ÇΩ)</th>
                <th>–§–∞–∫—Ç: —Ç—Ä–µ–Ω–µ—Ä—ã (‚ÇΩ)</th>
                <th>–≠–∫–æ–Ω–æ–º–∏—è/–ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥ –£–≠–í–ü</th>
                <th>–û—Å—Ç–∞—Ç–æ–∫ –£–≠–í–ü</th>
            </tr>
        </thead>
        <tbody>
"""
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤–∏–¥–∞–º —Å–ø–æ—Ä—Ç–∞
            sport_stats = {}
            for event in events:
                if event.sport not in sport_stats:
                    sport_stats[event.sport] = {
                        'count': 0, 
                        'plan_children': 0, 'fact_children': 0,
                        'plan_trainers': 0, 'fact_trainers': 0,
                        'plan_children_completed': 0,  # –ü–ª–∞–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö
                        'plan_trainers_completed': 0   # –ü–ª–∞–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö
                    }
                
                sport_stats[event.sport]['count'] += 1
                sport_stats[event.sport]['plan_children'] += event.children_budget
                sport_stats[event.sport]['plan_trainers'] += event.trainers_budget
                
                # –§–∞–∫—Ç –∏ –ø–ª–∞–Ω –¥–ª—è –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö (–¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —ç–∫–æ–Ω–æ–º–∏–∏/–ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥–∞)
                if event.status in ["–ü—Ä–æ–≤–µ–¥–µ–Ω–æ", "–û—Ç–º–µ–Ω–µ–Ω–æ"]:
                    sport_stats[event.sport]['plan_children_completed'] += event.children_budget
                    sport_stats[event.sport]['plan_trainers_completed'] += event.trainers_budget
                    
                    if event.status == "–ü—Ä–æ–≤–µ–¥–µ–Ω–æ":
                        if event.actual_children_budget is not None:
                            sport_stats[event.sport]['fact_children'] += event.actual_children_budget
                        else:
                            # –ï—Å–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ, –Ω–æ —Ñ–∞–∫—Ç –Ω–µ —É–∫–∞–∑–∞–Ω - –±–µ—Ä—ë–º –ø–ª–∞–Ω
                            sport_stats[event.sport]['fact_children'] += event.children_budget
                        
                        if event.actual_trainers_budget is not None:
                            sport_stats[event.sport]['fact_trainers'] += event.actual_trainers_budget
                        else:
                            # –ï—Å–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ, –Ω–æ —Ñ–∞–∫—Ç –Ω–µ —É–∫–∞–∑–∞–Ω - –±–µ—Ä—ë–º –ø–ª–∞–Ω
                            sport_stats[event.sport]['fact_trainers'] += event.trainers_budget
                    # –î–ª—è –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç = 0 (–Ω–µ —Ç—Ä–∞—Ç–∏–ª–∏)
                # –î–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö, –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω–Ω—ã—Ö - —Ñ–∞–∫—Ç = 0
            
            for sport in sorted(sport_stats.keys()):
                stats = sport_stats[sport]
                # –û—Å—Ç–∞—Ç–æ–∫ = –ü–ª–∞–Ω –≤—Å–µ—Ö - –§–∞–∫—Ç (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ = –æ—Å—Ç–∞—Ç–æ–∫, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ = –ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥)
                ostatok_c = stats['plan_children'] - stats['fact_children']
                ostatok_t = stats['plan_trainers'] - stats['fact_trainers']
                
                # –≠–∫–æ–Ω–æ–º–∏—è/–ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥ = –ü–ª–∞–Ω - –§–∞–∫—Ç –¢–û–õ–¨–ö–û –¥–ª—è –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö
                # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ = —ç–∫–æ–Ω–æ–º–∏—è (–∑–µ–ª—ë–Ω—ã–π), –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ = –ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥ (–∫—Ä–∞—Å–Ω—ã–π)
                if stats['plan_children_completed'] > 0:
                    diff_c = stats['plan_children_completed'] - stats['fact_children']
                    diff_c_html = f"<td style=\"color: {'green' if diff_c > 0 else 'red' if diff_c < 0 else 'black'};\">{diff_c:+.2f}</td>"
                else:
                    diff_c_html = "<td style=\"color: gray; font-style: italic;\">–Ω/–¥</td>"
                
                if stats['plan_trainers_completed'] > 0:
                    diff_t = stats['plan_trainers_completed'] - stats['fact_trainers']
                    diff_t_html = f"<td style=\"color: {'green' if diff_t > 0 else 'red' if diff_t < 0 else 'black'};\">{diff_t:+.2f}</td>"
                else:
                    diff_t_html = "<td style=\"color: gray; font-style: italic;\">–Ω/–¥</td>"
                
                html_content += f"""
            <tr>
                <td>{html.escape(sport)}</td>
                <td>{stats['count']}</td>
                <td>{stats['plan_children']:.2f}</td>
                <td>{stats['fact_children']:.2f}</td>
                {diff_c_html}
                <td style="color: {'green' if ostatok_c > 0 else 'red' if ostatok_c < 0 else 'black'}; font-weight: bold;">{ostatok_c:+.2f}</td>
                <td>{stats['plan_trainers']:.2f}</td>
                <td>{stats['fact_trainers']:.2f}</td>
                {diff_t_html}
                <td style="color: {'green' if ostatok_t > 0 else 'red' if ostatok_t < 0 else 'black'}; font-weight: bold;">{ostatok_t:+.2f}</td>
            </tr>
"""
        
        elif self.current_report_type == 'status':
            # –û—Ç—á–µ—Ç –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            html_content += """
    <table>
        <thead>
            <tr>
                <th>–°—Ç–∞—Ç—É—Å</th>
                <th>–ú–µ—Å—è—Ü</th>
                <th>–í–∏–¥ —Å–ø–æ—Ä—Ç–∞</th>
                <th>–¢–∏–ø</th>
                <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                <th>–ú–µ—Å—Ç–æ</th>
            </tr>
        </thead>
        <tbody>
"""
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É –∏ –º–µ—Å—è—Ü—É
            for event in sorted(events, key=lambda e: (e.status or "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ", MONTHS.index(e.month) if e.month in MONTHS else 999)):
                status_class = ""
                if event.status == "–ü—Ä–æ–≤–µ–¥–µ–Ω–æ":
                    status_class = "status-completed"
                elif event.status == "–û—Ç–º–µ–Ω–µ–Ω–æ":
                    status_class = "status-cancelled"
                elif event.status == "–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ":
                    status_class = "status-postponed"
                
                html_content += f"""
            <tr class="{status_class}">
                <td>{html.escape(event.status or '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ')}</td>
                <td>{html.escape(event.month)}</td>
                <td>{html.escape(event.sport)}</td>
                <td>{html.escape(event.event_type)}</td>
                <td>{html.escape(event.name)}</td>
                <td>{html.escape(event.location)}</td>
            </tr>
"""
        
        elif self.current_report_type == 'sports':
            # –û—Ç—á–µ—Ç –ø–æ –≤–∏–¥–∞–º —Å–ø–æ—Ä—Ç–∞
            html_content += """
    <table>
        <thead>
            <tr>
                <th>–í–∏–¥ —Å–ø–æ—Ä—Ç–∞</th>
                <th>–ú–µ—Å—è—Ü</th>
                <th>–¢–∏–ø</th>
                <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                <th>–ú–µ—Å—Ç–æ</th>
                <th>–°—Ç–∞—Ç—É—Å</th>
                <th>–ü–ª–∞–Ω: –¥–µ—Ç–µ–π (‚ÇΩ)</th>
                <th>–ü–ª–∞–Ω: —Ç—Ä–µ–Ω–µ—Ä—ã (‚ÇΩ)</th>
            </tr>
        </thead>
        <tbody>
"""
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–ø–æ—Ä—Ç—É –∏ –º–µ—Å—è—Ü—É
            for event in sorted(events, key=lambda e: (e.sport, MONTHS.index(e.month) if e.month in MONTHS else 999)):
                status_class = ""
                if event.status == "–ü—Ä–æ–≤–µ–¥–µ–Ω–æ":
                    status_class = "status-completed"
                elif event.status == "–û—Ç–º–µ–Ω–µ–Ω–æ":
                    status_class = "status-cancelled"
                elif event.status == "–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ":
                    status_class = "status-postponed"
                
                html_content += f"""
            <tr class="{status_class}">
                <td>{html.escape(event.sport)}</td>
                <td>{html.escape(event.month)}</td>
                <td>{html.escape(event.event_type)}</td>
                <td>{html.escape(event.name)}</td>
                <td>{html.escape(event.location)}</td>
                <td>{html.escape(event.status or '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ')}</td>
                <td>{event.children_budget:.2f}</td>
                <td>{event.trainers_budget:.2f}</td>
            </tr>
"""
        
        elif self.current_report_type == 'by_type':
            # –û—Ç—á–µ—Ç –ø–æ —Ç–∏–ø–∞–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
            html_content += """
    <table>
        <thead>
            <tr>
                <th>–í–∏–¥ —Å–ø–æ—Ä—Ç–∞</th>
                <th>–¢–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</th>
                <th>–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π</th>
                <th>–ü–ª–∞–Ω: –¥–µ—Ç–µ–π (‚ÇΩ)</th>
                <th>–§–∞–∫—Ç: –¥–µ—Ç–µ–π (‚ÇΩ)</th>
                <th>–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–µ—Ç–µ–π</th>
                <th>–ü–ª–∞–Ω: —Ç—Ä–µ–Ω–µ—Ä—ã (‚ÇΩ)</th>
                <th>–§–∞–∫—Ç: —Ç—Ä–µ–Ω–µ—Ä—ã (‚ÇΩ)</th>
                <th>–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–æ–≤</th>
            </tr>
        </thead>
        <tbody>
"""
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–∏–¥–∞–º —Å–ø–æ—Ä—Ç–∞ –∏ —Ç–∏–ø–∞–º
            sport_stats = {}
            for event in events:
                if event.sport not in sport_stats:
                    sport_stats[event.sport] = {
                        '–í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ': {'count': 0, 'plan_children': 0, 'fact_children': 0, 'plan_trainers': 0, 'fact_trainers': 0, 'plan_children_completed': 0, 'plan_trainers_completed': 0},
                        '–í—ã–µ–∑–¥–Ω–æ–µ': {'count': 0, 'plan_children': 0, 'fact_children': 0, 'plan_trainers': 0, 'fact_trainers': 0, 'plan_children_completed': 0, 'plan_trainers_completed': 0}
                    }
                
                event_type = event.event_type
                stats = sport_stats[event.sport][event_type]
                stats['count'] += 1
                stats['plan_children'] += event.children_budget
                stats['plan_trainers'] += event.trainers_budget
                
                if event.status in ["–ü—Ä–æ–≤–µ–¥–µ–Ω–æ", "–û—Ç–º–µ–Ω–µ–Ω–æ"]:
                    stats['plan_children_completed'] += event.children_budget
                    stats['plan_trainers_completed'] += event.trainers_budget
                    
                    if event.status == "–ü—Ä–æ–≤–µ–¥–µ–Ω–æ":
                        stats['fact_children'] += event.actual_children_budget if event.actual_children_budget else event.children_budget
                        stats['fact_trainers'] += event.actual_trainers_budget if event.actual_trainers_budget else event.trainers_budget
            
            # –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ
            for sport in sorted(sport_stats.keys()):
                for event_type in ['–í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ', '–í—ã–µ–∑–¥–Ω–æ–µ']:
                    stats = sport_stats[sport][event_type]
                    if stats['count'] > 0:
                        diff_c = stats['plan_children_completed'] - stats['fact_children'] if stats['plan_children_completed'] > 0 else 0
                        diff_t = stats['plan_trainers_completed'] - stats['fact_trainers'] if stats['plan_trainers_completed'] > 0 else 0
                        
                        html_content += f"""
            <tr>
                <td>{html.escape(sport)}</td>
                <td>{html.escape(event_type)}</td>
                <td>{stats['count']}</td>
                <td>{stats['plan_children']:.2f}</td>
                <td>{stats['fact_children']:.2f}</td>
                <td style="color: {'green' if diff_c > 0 else 'red' if diff_c < 0 else 'black'}; font-weight: bold;">{diff_c:+.2f}</td>
                <td>{stats['plan_trainers']:.2f}</td>
                <td>{stats['fact_trainers']:.2f}</td>
                <td style="color: {'green' if diff_t > 0 else 'red' if diff_t < 0 else 'black'}; font-weight: bold;">{diff_t:+.2f}</td>
            </tr>
"""
        
        elif self.current_report_type == 'summary':
            # –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ - —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            total = len(events)
            internal = sum(1 for e in events if e.event_type == "–í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ")
            external = sum(1 for e in events if e.event_type == "–í—ã–µ–∑–¥–Ω–æ–µ")
            conducted = sum(1 for e in events if e.status == "–ü—Ä–æ–≤–µ–¥–µ–Ω–æ")
            cancelled = sum(1 for e in events if e.status == "–û—Ç–º–µ–Ω–µ–Ω–æ")
            postponed = sum(1 for e in events if e.status == "–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ")
            planned = sum(1 for e in events if e.status == "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ")
            
            html_content += f"""
    <div class="summary">
        <h3>–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê</h3>
        <p><strong>–í—Å–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:</strong> {total}</p>
        <p style="margin-left: 20px;">–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö: {internal} ({internal/total*100:.1f}%)</p>
        <p style="margin-left: 20px;">–í—ã–µ–∑–¥–Ω—ã—Ö: {external} ({external/total*100:.1f}%)</p>
        
        <h4 style="margin-top: 20px;">–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:</h4>
        <p style="margin-left: 20px;">–ü—Ä–æ–≤–µ–¥–µ–Ω–æ: {conducted} ({conducted/total*100:.1f}%)</p>
"""
            if cancelled > 0:
                html_content += f"""        <p style="margin-left: 20px;">–û—Ç–º–µ–Ω–µ–Ω–æ: {cancelled} ({cancelled/total*100:.1f}%)</p>
"""
            if postponed > 0:
                html_content += f"""        <p style="margin-left: 20px;">–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: {postponed} ({postponed/total*100:.1f}%)</p>
"""
            html_content += f"""        <p style="margin-left: 20px;">–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {planned} ({planned/total*100:.1f}%)</p>
    </div>
    
    <h3 style="margin-top: 30px;">–ü–û –í–ò–î–ê–ú –°–ü–û–†–¢–ê</h3>
    <table>
        <thead>
            <tr>
                <th>–í–∏–¥ —Å–ø–æ—Ä—Ç–∞</th>
                <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
                <th>–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±—â–µ–≥–æ</th>
            </tr>
        </thead>
        <tbody>
"""
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∏–¥–∞–º —Å–ø–æ—Ä—Ç–∞
            sport_counts = {}
            for event in events:
                sport_counts[event.sport] = sport_counts.get(event.sport, 0) + 1
            
            for sport in sorted(sport_counts.keys()):
                count = sport_counts[sport]
                html_content += f"""
            <tr>
                <td>{html.escape(sport)}</td>
                <td>{count}</td>
                <td>{count/total*100:.1f}%</td>
            </tr>
"""
            
            html_content += """
        </tbody>
    </table>
"""
        
        elif self.current_report_type == 'annual_ppo':
            # –ì–æ–¥–æ–≤–æ–π –æ—Ç—á–µ—Ç –ü–ü–û —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ –∫–≤–∞—Ä—Ç–∞–ª–∞–º –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π —Å–º–µ—Ç
            html_content += """
    <table style="font-size: 11px;">
        <thead>
            <tr>
                <th>‚Ññ</th>
                <th>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–µ–π –∑–∞—Ç—Ä–∞—Ç/–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π</th>
                <th>–ú–µ—Å—Ç–æ/–ï–¥.–∏–∑–º.</th>
                <th>–î–∞—Ç—ã/–ö–æ–ª-–≤–æ</th>
                <th>–°—Ç–æ–∏–º.</th>
                <th>–ß–µ–ª.</th>
                <th>–ó–∞—Ç—Ä–∞—Ç—ã (—Ä—É–±)</th>
                <th>1 –∫–≤.</th>
                <th>2 –∫–≤.</th>
                <th>3 –∫–≤.</th>
                <th>4 –∫–≤.</th>
            </tr>
        </thead>
        <tbody>
"""
            
            q_map = {
                '–Ø–Ω–≤–∞—Ä—å': 1, '–§–µ–≤—Ä–∞–ª—å': 1, '–ú–∞—Ä—Ç': 1,
                '–ê–ø—Ä–µ–ª—å': 2, '–ú–∞–π': 2, '–ò—é–Ω—å': 2,
                '–ò—é–ª—å': 3, '–ê–≤–≥—É—Å—Ç': 3, '–°–µ–Ω—Ç—è–±—Ä—å': 3,
                '–û–∫—Ç—è–±—Ä—å': 4, '–ù–æ—è–±—Ä—å': 4, '–î–µ–∫–∞–±—Ä—å': 4
            }
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –≤—ã–µ–∑–¥–Ω—ã–µ –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ
            away_events = [e for e in events if e.event_type == "–í—ã–µ–∑–¥–Ω–æ–µ"]
            internal_events = [e for e in events if e.event_type == "–í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ"]
            
            # –í—ã–µ–∑–¥–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
            if away_events:
                html_content += """
            <tr style="background-color: #e6f3ff;">
                <td colspan="11"><strong>1. –í–´–ï–ó–î–ù–´–ï –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø</strong></td>
            </tr>
"""
                
                # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç –∏—Ç–æ–≥–æ–≤ –ø–æ –≤—ã–µ–∑–¥–Ω—ã–º –¥–ª—è —Å–∏–Ω–µ–π —Å—Ç—Ä–æ–∫–∏
                away_q_totals_html = {1: 0, 2: 0, 3: 0, 4: 0}
                away_total_html = 0
                for event in away_events:
                    quarter = q_map.get(event.month, 1)
                    away_q_totals_html[quarter] += event.children_budget
                    away_total_html += event.children_budget
                
                # –°–∏–Ω—è—è –∏—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Å—É–º–º–∞–º–∏ –ø–æ –∫–≤–∞—Ä—Ç–∞–ª–∞–º
                html_content += f"""
            <tr style="background-color: #0066B3; color: white; font-weight: bold;">
                <td colspan="6"></td>
                <td>{format_number_ru(away_total_html)}</td>
                <td>{format_number_ru(away_q_totals_html[1])}</td>
                <td>{format_number_ru(away_q_totals_html[2])}</td>
                <td>{format_number_ru(away_q_totals_html[3])}</td>
                <td>{format_number_ru(away_q_totals_html[4])}</td>
            </tr>
"""
                
                for idx, event in enumerate(away_events, 1):
                    quarter = q_map.get(event.month, 1)
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å–º–µ—Ç—É –ü–ü–û
                    estimates = self.db.get_estimates_by_event(event.id)
                    ppo_estimate = None
                    for est in estimates:
                        if est[2] == '–ü–ü–û':  # estimate_type
                            ppo_estimate = est
                            break
                    
                    # –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–≤–∞—Ä—Ç–∞–ª—ã
                    q_vals = ['', '', '', '']
                    q_vals[quarter-1] = format_number_ru(event.children_budget)
                    
                    # –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (—Å —Ç—Ä—ë—Ö–∑–Ω–∞—á–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π: 1.001, 1.002, –∏ —Ç.–¥.)
                    html_content += f"""
            <tr style="font-weight: bold;">
                <td>1.{idx:03d}</td>
                <td>{html.escape(event.name[:60])}</td>
                <td>{html.escape(event.location)}</td>
                <td>{html.escape(event.month)}</td>
                <td></td>
                <td></td>
                <td>{format_number_ru(event.children_budget)}</td>
                <td>{q_vals[0]}</td>
                <td>{q_vals[1]}</td>
                <td>{q_vals[2]}</td>
                <td>{q_vals[3]}</td>
            </tr>
"""
                    
                    # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Å–º–µ—Ç–µ
                    if ppo_estimate:
                        estimate_id = ppo_estimate[0]
                        items = self.db.get_estimate_items(estimate_id)
                        
                        for item in items:
                            category = item[2]
                            description = item[3] or ''
                            people_count = item[4] or 0
                            days_count = item[5] or 0
                            rate = item[6] or 0
                            
                            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
                            if category == "–ü—Ä–æ–µ–∑–¥":
                                html_content += f"""
            <tr>
                <td></td>
                <td style="padding-left: 30px;">{category}</td>
                <td>{html.escape(description)}</td>
                <td>{days_count}</td>
                <td>{rate:.0f}</td>
                <td>{people_count}</td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
            </tr>
"""
                            elif category == "–ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ":
                                html_content += f"""
            <tr>
                <td></td>
                <td style="padding-left: 30px;">{category}</td>
                <td>–¥–Ω</td>
                <td>{days_count}</td>
                <td>{rate:.0f}</td>
                <td>{people_count}</td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
            </tr>
"""
                            elif category == "–°—É—Ç–æ—á–Ω—ã–µ":
                                html_content += f"""
            <tr>
                <td></td>
                <td style="padding-left: 30px;">{category}</td>
                <td>–¥–Ω</td>
                <td>{days_count}</td>
                <td>{rate:.0f}</td>
                <td>{people_count}</td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
            </tr>
"""
            
            # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            if internal_events:
                html_content += """
            <tr style="background-color: #e6f3ff;">
                <td colspan="11"><strong>2. –í–ù–£–¢–†–ï–ù–ù–ò–ï –ò –ì–û–†–û–î–°–ö–ò–ï –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø</strong></td>
            </tr>
"""
                
                # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç –∏—Ç–æ–≥–æ–≤ –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –¥–ª—è —Å–∏–Ω–µ–π —Å—Ç—Ä–æ–∫–∏
                internal_q_totals_html = {1: 0, 2: 0, 3: 0, 4: 0}
                internal_total_html = 0
                for event in internal_events:
                    quarter = q_map.get(event.month, 1)
                    internal_q_totals_html[quarter] += event.children_budget
                    internal_total_html += event.children_budget
                
                # –°–∏–Ω—è—è –∏—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Å—É–º–º–∞–º–∏ –ø–æ –∫–≤–∞—Ä—Ç–∞–ª–∞–º
                html_content += f"""
            <tr style="background-color: #0066B3; color: white; font-weight: bold;">
                <td colspan="6"></td>
                <td>{format_number_ru(internal_total_html)}</td>
                <td>{format_number_ru(internal_q_totals_html[1])}</td>
                <td>{format_number_ru(internal_q_totals_html[2])}</td>
                <td>{format_number_ru(internal_q_totals_html[3])}</td>
                <td>{format_number_ru(internal_q_totals_html[4])}</td>
            </tr>
"""
                
                for idx, event in enumerate(internal_events, 1):
                    quarter = q_map.get(event.month, 1)
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å–º–µ—Ç—É –ü–ü–û
                    estimates = self.db.get_estimates_by_event(event.id)
                    ppo_estimate = None
                    for est in estimates:
                        if est[2] == '–ü–ü–û':  # estimate_type
                            ppo_estimate = est
                            break
                    
                    # –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–≤–∞—Ä—Ç–∞–ª—ã
                    q_vals = ['', '', '', '']
                    q_vals[quarter-1] = format_number_ru(event.children_budget)
                    
                    # –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (—Å —Ç—Ä—ë—Ö–∑–Ω–∞—á–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π: 2.001, 2.002, –∏ —Ç.–¥.)
                    html_content += f"""
            <tr style="font-weight: bold;">
                <td>2.{idx:03d}</td>
                <td>{html.escape(event.name[:60])}</td>
                <td>{html.escape(event.location)}</td>
                <td>{html.escape(event.month)}</td>
                <td></td>
                <td></td>
                <td>{format_number_ru(event.children_budget)}</td>
                <td>{q_vals[0]}</td>
                <td>{q_vals[1]}</td>
                <td>{q_vals[2]}</td>
                <td>{q_vals[3]}</td>
            </tr>
"""
                    
                    # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Å–º–µ—Ç–µ
                    if ppo_estimate:
                        estimate_id = ppo_estimate[0]
                        items = self.db.get_estimate_items(estimate_id)
                        
                        for item in items:
                            category = item[2]
                            description = item[3] or ''
                            people_count = item[4] or 0
                            days_count = item[5] or 0
                            rate = item[6] or 0
                            
                            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ - –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –≤—ã–≤–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
                            html_content += f"""
            <tr>
                <td></td>
                <td style="padding-left: 30px;">{category}</td>
                <td>{html.escape(description)}</td>
                <td>{days_count}</td>
                <td>{rate:.0f}</td>
                <td>{people_count}</td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
            </tr>
"""
            
            html_content += """
        </tbody>
    </table>
"""
        
        elif self.current_report_type == 'annual_uevp':
            # –ì–æ–¥–æ–≤–æ–π –æ—Ç—á–µ—Ç –£–≠–í–ü - —Ç–æ–ª—å–∫–æ –≤—ã–µ–∑–¥–Ω—ã–µ
            away_events = [e for e in events if e.event_type == "–í—ã–µ–∑–¥–Ω–æ–µ"]
            
            html_content += """
    <table>
        <thead>
            <tr>
                <th>–î–æ–ª–∂–Ω–æ—Å—Ç—å</th>
                <th>–ú–µ—Å—è—Ü</th>
                <th>–î–Ω–∏</th>
                <th>–ì–æ—Ä–æ–¥</th>
                <th>–¶–µ–ª—å –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏</th>
                <th>–ü—Ä–æ–µ–∑–¥ (‚ÇΩ)</th>
                <th>–ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ (‚ÇΩ)</th>
                <th>–°—É—Ç–æ—á–Ω—ã–µ (‚ÇΩ)</th>
                <th>–ò—Ç–æ–≥–æ (‚ÇΩ)</th>
                <th>–§–∞–∫—Ç (‚ÇΩ)</th>
                <th>–≠–∫/–ü–µ—Ä (‚ÇΩ)</th>
            </tr>
        </thead>
        <tbody>
"""
            
            total_proezd = 0
            total_prozhivanie = 0
            total_sutochnie = 0
            total_all = 0
            total_fact = 0
            
            for event in away_events:
                # –ü–æ–ª—É—á–∞–µ–º —Å–º–µ—Ç—É –£–≠–í–ü –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                estimate_data = self.db.cursor.execute('''
                    SELECT id, total_amount
                    FROM estimates
                    WHERE event_id = ? AND estimate_type = '–£–≠–í–ü'
                ''', (event.id,)).fetchone()
                
                if not estimate_data:
                    continue
                
                estimate_id = estimate_data[0]
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å–º–µ—Ç—ã
                items = self.db.cursor.execute('''
                    SELECT category, SUM(total) as total, MAX(days_count) as days
                    FROM estimate_items
                    WHERE estimate_id = ?
                    GROUP BY category
                ''', (estimate_id,)).fetchall()
                
                proezd = 0
                prozhivanie = 0
                sutochnie = 0
                days = 0
                
                for category, total, day_count in items:
                    if category == '–ü—Ä–æ–µ–∑–¥':
                        proezd = total
                    elif category == '–ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ':
                        prozhivanie = total
                        days = day_count or days
                    elif category == '–°—É—Ç–æ—á–Ω—ã–µ':
                        sutochnie = total
                        days = day_count or days
                
                if days == 0:
                    days = 5
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ü–µ–ª—å –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏
                purpose = f"–°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ {event.name} –ø–æ –≤–∏–¥—É —Å–ø–æ—Ä—Ç–∞ {event.sport}"
                
                # –ò—Ç–æ–≥–æ –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é
                event_total = proezd + prozhivanie + sutochnie
                
                # –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã - —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö –∏ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö
                fact_cell = "-"
                economy_cell = "-"
                if event.status in ["–ü—Ä–æ–≤–µ–¥–µ–Ω–æ", "–û—Ç–º–µ–Ω–µ–Ω–æ"]:
                    fact_amount = event.actual_trainers_budget if event.actual_trainers_budget is not None else event_total
                    fact_cell = format_number_ru(fact_amount)
                    economy_amount = event_total - fact_amount
                    economy_cell = format_number_ru(economy_amount)
                    total_fact += fact_amount
                
                html_content += f"""
            <tr>
                <td>–¢—Ä–µ–Ω–µ—Ä</td>
                <td>{html.escape(event.month)}</td>
                <td>{days}</td>
                <td>{html.escape(event.location)}</td>
                <td>{html.escape(purpose)}</td>
                <td>{format_number_ru(proezd)}</td>
                <td>{format_number_ru(prozhivanie)}</td>
                <td>{format_number_ru(sutochnie)}</td>
                <td>{format_number_ru(event_total)}</td>
                <td>{fact_cell}</td>
                <td>{economy_cell}</td>
            </tr>
"""
                
                total_proezd += proezd
                total_prozhivanie += prozhivanie
                total_sutochnie += sutochnie
                total_all += event_total
            
            # –°—Ç—Ä–æ–∫–∞ –∏—Ç–æ–≥–æ
            total_fact_cell = format_number_ru(total_fact) if total_fact > 0 else "-"
            total_economy_cell = format_number_ru(total_all - total_fact) if total_fact > 0 else "-"
            
            html_content += f"""
            <tr style="font-weight: bold; background-color: #f0f0f0;">
                <td>–ò–¢–û–ì–û:</td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td>{format_number_ru(total_proezd)}</td>
                <td>{format_number_ru(total_prozhivanie)}</td>
                <td>{format_number_ru(total_sutochnie)}</td>
                <td>{format_number_ru(total_all)}</td>
                <td>{total_fact_cell}</td>
                <td>{total_economy_cell}</td>
            </tr>
        </tbody>
    </table>
"""
        
        else:  # 'full' and others
            html_content += """
    <table>
        <thead>
            <tr>
                <th>–ú–µ—Å—è—Ü</th>
                <th>–¢–∏–ø</th>
                <th>–°–ø–æ—Ä—Ç</th>
                <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                <th>–ú–µ—Å—Ç–æ</th>
                <th>–î–µ—Ç–µ–π (‚ÇΩ)</th>
                <th>–¢—Ä–µ–Ω–µ—Ä—ã (‚ÇΩ)</th>
                <th>–°—Ç–∞—Ç—É—Å</th>
            </tr>
        </thead>
        <tbody>
"""
            
            for event in events:
                status_class = ""
                if event.status == "–ü—Ä–æ–≤–µ–¥–µ–Ω–æ":
                    status_class = "status-completed"
                elif event.status == "–û—Ç–º–µ–Ω–µ–Ω–æ":
                    status_class = "status-cancelled"
                elif event.status == "–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ":
                    status_class = "status-postponed"
                
                html_content += f"""
            <tr class="{status_class}">
                <td>{html.escape(event.month)}</td>
                <td>{html.escape(event.event_type)}</td>
                <td>{html.escape(event.sport)}</td>
                <td>{html.escape(event.name)}</td>
                <td>{html.escape(event.location)}</td>
                <td>{event.children_budget:.2f}</td>
                <td>{event.trainers_budget:.2f}</td>
                <td>{html.escape(event.status or '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ')}</td>
            </tr>
"""
            
            html_content += """
        </tbody>
    </table>
"""
        
        # –ò—Ç–æ–≥–∏ (–¥–ª—è –≤—Å–µ—Ö, –∫—Ä–æ–º–µ summary - —É –Ω–µ–≥–æ —Å–≤–æ–∏ –∏—Ç–æ–≥–∏ —É–∂–µ –≤—Å—Ç—Ä–æ–µ–Ω—ã)
        if self.current_report_type != 'summary':
            # –î–ª—è –≥–æ–¥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –£–≠–í–ü –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–µ–∑–¥–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            events_for_totals = [e for e in events if e.event_type == "–í—ã–µ–∑–¥–Ω–æ–µ"] if self.current_report_type == 'annual_uevp' else events
            
            total_children_plan = sum(e.children_budget for e in events_for_totals)
            total_trainers_plan = sum(e.trainers_budget for e in events_for_totals)
            
            # –î–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞–Ω, —Ñ–∞–∫—Ç –∏ –æ—Å—Ç–∞—Ç–æ–∫
            if self.current_report_type == 'financial':
                total_children_fact = sum(
                    e.actual_children_budget if e.actual_children_budget is not None and e.status == "–ü—Ä–æ–≤–µ–¥–µ–Ω–æ" 
                    else (e.children_budget if e.status == "–ü—Ä–æ–≤–µ–¥–µ–Ω–æ" else 0) 
                    for e in events
                )
                total_trainers_fact = sum(
                    e.actual_trainers_budget if e.actual_trainers_budget is not None and e.status == "–ü—Ä–æ–≤–µ–¥–µ–Ω–æ" 
                    else (e.trainers_budget if e.status == "–ü—Ä–æ–≤–µ–¥–µ–Ω–æ" else 0) 
                    for e in events
                )
                
                ostatok_children = total_children_plan - total_children_fact
                ostatok_trainers = total_trainers_plan - total_trainers_fact
                
                html_content += f"""
    <div class="summary">
        <h3>–ò–¢–û–ì–ò</h3>
        <p><strong>–í—Å–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:</strong> {len(events)}</p>
        
        <h4 style="margin-top: 20px;">–ë—é–¥–∂–µ—Ç –Ω–∞ –¥–µ—Ç–µ–π (–ü–ü–û "–ì–∞–∑–ø—Ä–æ–º –¥–æ–±—ã—á–∞ –Ø–º–±—É—Ä–≥ –ø—Ä–æ—Ñ—Å–æ—é–∑")</h4>
        <p style="margin-left: 20px;">–ü–ª–∞–Ω: {format_rubles(total_children_plan)}</p>
        <p style="margin-left: 20px;">–§–∞–∫—Ç: {format_rubles(total_children_fact)}</p>
        <p style="margin-left: 20px; color: {'green' if ostatok_children > 0 else 'red' if ostatok_children < 0 else 'black'}; font-weight: bold;">
            –û—Å—Ç–∞—Ç–æ–∫: {format_rubles(abs(ostatok_children))} 
            ({'—ç–∫–æ–Ω–æ–º–∏—è' if ostatok_children > 0 else '–ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥' if ostatok_children < 0 else '–ø–æ –ø–ª–∞–Ω—É'})
        </p>
        
        <h4 style="margin-top: 20px;">–ë—é–¥–∂–µ—Ç –Ω–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤ (—Ñ. –£–≠–í–ü –û–û–û "–ì–∞–∑–ø—Ä–æ–º –¥–æ–±—ã—á–∞ –Ø–º–±—É—Ä–≥")</h4>
        <p style="margin-left: 20px;">–ü–ª–∞–Ω: {format_rubles(total_trainers_plan)}</p>
        <p style="margin-left: 20px;">–§–∞–∫—Ç: {format_rubles(total_trainers_fact)}</p>
        <p style="margin-left: 20px; color: {'green' if ostatok_trainers > 0 else 'red' if ostatok_trainers < 0 else 'black'}; font-weight: bold;">
            –û—Å—Ç–∞—Ç–æ–∫: {format_rubles(abs(ostatok_trainers))} 
            ({'—ç–∫–æ–Ω–æ–º–∏—è' if ostatok_trainers > 0 else '–ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥' if ostatok_trainers < 0 else '–ø–æ –ø–ª–∞–Ω—É'})
        </p>
    </div>
"""
            elif self.current_report_type == 'annual_ppo':
                # –î–ª—è –≥–æ–¥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ü–ü–û - —Ç–æ–ª—å–∫–æ –ü–ü–û
                html_content += f"""
    <div class="summary">
        <h3>–ò—Ç–æ–≥–∏</h3>
        <p><strong>–í—Å–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:</strong> {len(events_for_totals)}</p>
        <p><strong>–ë—é–¥–∂–µ—Ç –Ω–∞ –¥–µ—Ç–µ–π (–ü–ü–û "–ì–∞–∑–ø—Ä–æ–º –¥–æ–±—ã—á–∞ –Ø–º–±—É—Ä–≥ –ø—Ä–æ—Ñ—Å–æ—é–∑"):</strong> {format_rubles(total_children_plan)}</p>
    </div>
"""
            elif self.current_report_type == 'annual_uevp':
                # –î–ª—è –≥–æ–¥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –£–≠–í–ü - —Ç–æ–ª—å–∫–æ –£–≠–í–ü
                html_content += f"""
    <div class="summary">
        <h3>–ò—Ç–æ–≥–∏</h3>
        <p><strong>–í—Å–µ–≥–æ –≤—ã–µ–∑–¥–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:</strong> {len(events_for_totals)}</p>
        <p><strong>–ë—é–¥–∂–µ—Ç –Ω–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤ (—Ñ. –£–≠–í–ü –û–û–û "–ì–∞–∑–ø—Ä–æ–º –¥–æ–±—ã—á–∞ –Ø–º–±—É—Ä–≥"):</strong> {format_rubles(total_trainers_plan)}</p>
    </div>
"""
            else:
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤ - –ø—Ä–æ—Å—Ç—ã–µ –∏—Ç–æ–≥–∏
                html_content += f"""
    <div class="summary">
        <h3>–ò—Ç–æ–≥–∏</h3>
        <p><strong>–í—Å–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:</strong> {len(events)}</p>
        <p><strong>–ë—é–¥–∂–µ—Ç –Ω–∞ –¥–µ—Ç–µ–π (–ü–ü–û "–ì–∞–∑–ø—Ä–æ–º –¥–æ–±—ã—á–∞ –Ø–º–±—É—Ä–≥ –ø—Ä–æ—Ñ—Å–æ—é–∑"):</strong> {format_rubles(total_children_plan)}</p>
        <p><strong>–ë—é–¥–∂–µ—Ç –Ω–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤ (—Ñ. –£–≠–í–ü –û–û–û "–ì–∞–∑–ø—Ä–æ–º –¥–æ–±—ã—á–∞ –Ø–º–±—É—Ä–≥"):</strong> {format_rubles(total_trainers_plan)}</p>
    </div>
"""
        else:
            # –î–ª—è summary –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å–≤–æ–¥–∫—É
            plan_children = sum(e.children_budget for e in events)
            plan_trainers = sum(e.trainers_budget for e in events)
            
            # –ü–ª–∞–Ω –¥–ª—è –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö (–¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —ç–∫–æ–Ω–æ–º–∏–∏/–ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥–∞)
            plan_children_completed = sum(e.children_budget for e in events if e.status in ["–ü—Ä–æ–≤–µ–¥–µ–Ω–æ", "–û—Ç–º–µ–Ω–µ–Ω–æ"])
            plan_trainers_completed = sum(e.trainers_budget for e in events if e.status in ["–ü—Ä–æ–≤–µ–¥–µ–Ω–æ", "–û—Ç–º–µ–Ω–µ–Ω–æ"])
            
            # –§–∞–∫—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö
            fact_children = sum(
                e.actual_children_budget if e.actual_children_budget is not None else e.children_budget
                for e in events if e.status == "–ü—Ä–æ–≤–µ–¥–µ–Ω–æ"
            )
            fact_trainers = sum(
                e.actual_trainers_budget if e.actual_trainers_budget is not None else e.trainers_budget
                for e in events if e.status == "–ü—Ä–æ–≤–µ–¥–µ–Ω–æ"
            )
            
            html_content += f"""
    <h3 style="margin-top: 30px;">–§–ò–ù–ê–ù–°–û–í–ê–Ø –°–í–û–î–ö–ê</h3>
    <div class="summary">
        <h4>–ë—é–¥–∂–µ—Ç –Ω–∞ –¥–µ—Ç–µ–π (–ü–ü–û "–ì–∞–∑–ø—Ä–æ–º –¥–æ–±—ã—á–∞ –Ø–º–±—É—Ä–≥ –ø—Ä–æ—Ñ—Å–æ—é–∑")</h4>
        <p>–ü–ª–∞–Ω: {format_rubles(plan_children)}</p>
        <p>–§–∞–∫—Ç: {format_rubles(fact_children)}</p>
"""
            # –≠–∫–æ–Ω–æ–º–∏—è/–ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö
            if plan_children_completed > 0:
                diff_c = plan_children_completed - fact_children
                html_content += f"""        <p style="color: {'green' if diff_c > 0 else 'red' if diff_c < 0 else 'black'}; font-weight: bold;">
            {'‚úì –≠–∫–æ–Ω–æ–º–∏—è' if diff_c > 0 else '‚ö† –ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥' if diff_c < 0 else '‚úì –ü–æ –ø–ª–∞–Ω—É'}: 
            {format_rubles(abs(diff_c)) if diff_c != 0 else ''}
            {f' ({abs(diff_c)/plan_children_completed*100:.1f}%)' if diff_c != 0 else ''}
        </p>
"""
            else:
                html_content += """        <p style="color: gray; font-style: italic;">(–Ω/–¥ - –Ω–µ—Ç –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö)</p>
"""
            
            html_content += f"""        
        <h4 style="margin-top: 20px;">–ë—é–¥–∂–µ—Ç –Ω–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤ (—Ñ. –£–≠–í–ü –û–û–û "–ì–∞–∑–ø—Ä–æ–º –¥–æ–±—ã—á–∞ –Ø–º–±—É—Ä–≥")</h4>
        <p>–ü–ª–∞–Ω: {format_rubles(plan_trainers)}</p>
        <p>–§–∞–∫—Ç: {format_rubles(fact_trainers)}</p>
"""
            # –≠–∫–æ–Ω–æ–º–∏—è/–ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö
            if plan_trainers_completed > 0:
                diff_t = plan_trainers_completed - fact_trainers
                html_content += f"""        <p style="color: {'green' if diff_t > 0 else 'red' if diff_t < 0 else 'black'}; font-weight: bold;">
            {'‚úì –≠–∫–æ–Ω–æ–º–∏—è' if diff_t > 0 else '‚ö† –ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥' if diff_t < 0 else '‚úì –ü–æ –ø–ª–∞–Ω—É'}: 
            {format_rubles(abs(diff_t)) if diff_t != 0 else ''}
            {f' ({abs(diff_t)/plan_trainers_completed*100:.1f}%)' if diff_t != 0 else ''}
        </p>
"""
            else:
                html_content += """        <p style="color: gray; font-style: italic;">(–Ω/–¥ - –Ω–µ—Ç –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö)</p>
"""
            
            html_content += """    </div>
"""
        
        html_content += """
</body>
</html>
"""
        
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(html_content)

